<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  <$_SCRIBE_FILENAME$>
//  Generated on <$_SCRIBE_DATE$>
//
//  Created by HifiExperiements on 11/21/23
//  Copyright 2023 Overte e.V.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

<@include procedural/ShaderConstants.h@>

#define NUM_PARTICLES 1
//PROCEDURAL_PARTICLE_NUM_PARTICLES

#define NUM_TRIS_PER_PARTICLE 3
//PROCEDURAL_PARTICLE_NUM_TRIS_PER_PARTICLE

#define NUM_UPDATE_PROPS 0
//PROCEDURAL_PARTICLE_NUM_UPDATE_PROPS


#if NUM_UPDATE_PROPS > 0
TEXTURE(PROCEDURAL_PARTICLE_TEXTURE_PROP0, sampler2D, _prop0Texture);
#endif
#if NUM_UPDATE_PROPS > 1
TEXTURE(PROCEDURAL_PARTICLE_TEXTURE_PROP1, sampler2D, _prop1Texture);
#endif
#if NUM_UPDATE_PROPS > 2
TEXTURE(PROCEDURAL_PARTICLE_TEXTURE_PROP2, sampler2D, _prop2Texture);
#endif
#if NUM_UPDATE_PROPS > 3
TEXTURE(PROCEDURAL_PARTICLE_TEXTURE_PROP3, sampler2D, _prop3Texture);
#endif
#if NUM_UPDATE_PROPS > 4
TEXTURE(PROCEDURAL_PARTICLE_TEXTURE_PROP4, sampler2D, _prop4Texture);
#endif

<@func declareProceduralParticleRender()@>

vec4 getParticleProperty(const int propIndex, const int particleID) {
    if (propIndex < 0 || propIndex >= NUM_UPDATE_PROPS || particleID < 0 || particleID >= NUM_PARTICLES) {
        return vec4(0.0);
    }

#if NUM_UPDATE_PROPS > 0
    const ivec2 textureDims = textureSize(_prop0Texture, 0);
    const ivec2 uv = ivec2(particleID % textureDims.x, particleID / textureDims.x);
    if (propIndex == 0) {
        return texelFetch(_prop0Texture, uv, 0);
    }
#endif
#if NUM_UPDATE_PROPS > 1
    else if (propIndex == 1) {
        return texelFetch(_prop1Texture, uv, 0);
    }
#endif
#if NUM_UPDATE_PROPS > 2
    else if (propIndex == 2) {
        return texelFetch(_prop2Texture, uv, 0);
    }
#endif
#if NUM_UPDATE_PROPS > 3
    else if (propIndex == 3) {
        return texelFetch(_prop3Texture, uv, 0);
    }
#endif
#if NUM_UPDATE_PROPS > 4
    else if (propIndex == 4) {
        return texelFetch(_prop4Texture, uv, 0);
    }
#endif

    return vec4(0.0);
}

<@endfunc@>

// hack comment for extra whitespace

