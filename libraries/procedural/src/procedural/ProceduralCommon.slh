<@include gpu/Config.slh@>
//  Generated on <$_SCRIBE_DATE$>
//
//  Created by Bradley Austin Davis on 2015/09/05
//  Copyright 2013-2015 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

<@include gpu/Noise.slh@>
<@include procedural/ShaderConstants.h@>

TEXTURE(PROCEDURAL_TEXTURE_CHANNEL0, sampler2D, iChannel0);
TEXTURE(PROCEDURAL_TEXTURE_CHANNEL1, sampler2D, iChannel1);
TEXTURE(PROCEDURAL_TEXTURE_CHANNEL2, sampler2D, iChannel2);
TEXTURE(PROCEDURAL_TEXTURE_CHANNEL3, sampler2D, iChannel3);

// DO NOT TOUCH
// This block does not follow our normal rules of always using a struct and 
// always using 16 byte aligned types like vec4 and mat4
//
// This is because this block must be EXACTLY how it is in order to maintain
// comptability with existing procedural shaders that previously relied on these 
// inputs as uniforms, not members of a UBO

UNIFORM_BUFFER(0, standardInputsBuffer) {
    // Offset 0
    vec4 date;
    // Offset 16, acts as vec4 for alignment purposes
    vec3 worldPosition;
    // Offset 32, acts as vec4 for alignment purposes (but not packing purposes)
    vec3 worldScale;
    // We need this float here to keep globalTime from getting pulled to offset 44
    float _spare0;
    // Offset 48
    float globalTime;
    // Offset 52
    float localCreatedTime;
    // Offset 56
    float entityTime;
    // Offset 60
    int frameCount;
    // Offset 64, acts as vec4[4] for alignment purposes
    vec3 channelResolution[4];
    // Offset 128, acts as vec4[3] for alignment purposes
    // Also, each individual component is aligned as a vec4
    mat3 worldOrientation;
    // Offset 176
    vec4 _spare2;
} standardInputs;

#define iDate standardInputs.date
#define iWorldPosition standardInputs.worldPosition
#define iWorldScale standardInputs.worldScale
#define iGlobalTime standardInputs.globalTime
#define iLocalCreatedTime standardInputs.localCreatedTime
#define iEntityTime standardInputs.entityTime
#define iFrameCount standardInputs.frameCount
#define iChannelResolution standardInputs.channelResolution
#define iWorldOrientation standardInputs.worldOrientation

struct ProceduralVertexData {
    vec4 position;
    vec4 nonSkinnedPosition;    // input only
    vec3 normal;
    vec3 nonSkinnedNormal;      // input only
    vec3 tangent;               // input only
    vec3 nonSkinnedTangent;     // input only
    vec4 color;
    vec2 texCoord0;
};

struct ProceduralFragment {
    vec3 normal;
    vec3 diffuse;
    vec3 specular;
    vec3 emissive;
    float alpha;
    float roughness;
    float metallic;
    float occlusion;
    float scattering;
};

// Same as ProceduralFragment but with position
struct ProceduralFragmentWithPosition {
    vec3 position;
    vec3 normal;
    vec3 diffuse;
    vec3 specular;
    vec3 emissive;
    float alpha;
    float roughness;
    float metallic;
    float occlusion;
    float scattering;
};

// Unimplemented uniforms
// Resolution doesn't make sense in the VR context
const vec3 iResolution = vec3(1.0);
// Mouse functions not enabled currently
const vec4 iMouse = vec4(0.0);
// No support for audio input
const float iSampleRate = 1.0;
// No support for video input
const vec4 iChannelTime = vec4(0.0);

//PROCEDURAL_VERSION

// hack comment for extra whitespace 

