<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  <$_SCRIBE_FILENAME$>
//  Generated on <$_SCRIBE_DATE$>
//
//  Created by Andrzej Kapolka on 5/6/14.
//  Copyright 2014 High Fidelity, Inc.
//  Copyright 2024 Overte e.V.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

<@include graphics/Material.slh@>
<@include graphics/MaterialTextures.slh@>
<@include render-utils/ShaderConstants.h@>
<@include CullFace.slh@>

<@if HIFI_USE_MTOON@>
    <@if HIFI_USE_SHADOW@>
        <$declareMToonMaterialTextures(ALBEDO)$>
        <@if HIFI_USE_MIRROR@>
            LAYOUT(binding=GRAPHICS_TEXTURE_MATERIAL_MIRROR) uniform sampler2D mirrorMap;
        <@endif@>
    <@else@>
        <@if HIFI_USE_NORMALMAP@>
            <$declareMToonMaterialTextures(ALBEDO, NORMAL, SHADE, EMISSIVE, SHADING_SHIFT, MATCAP, RIM, UV_ANIMATION_MASK)$>
        <@else@>
            <$declareMToonMaterialTextures(ALBEDO, _SCRIBE_NULL, SHADE, EMISSIVE, SHADING_SHIFT, MATCAP, RIM, UV_ANIMATION_MASK)$>
        <@endif@>
    <@endif@>
<@else@>
    <@if HIFI_USE_SHADOW or HIFI_USE_UNLIT@>
        <$declareMaterialTextures(ALBEDO)$>
        <@if HIFI_USE_MIRROR@>
            LAYOUT(binding=GRAPHICS_TEXTURE_MATERIAL_MIRROR) uniform sampler2D mirrorMap;
        <@endif@>
    <@else@>
        <@if not HIFI_USE_LIGHTMAP@>
            <@if HIFI_USE_TRANSLUCENT@>
                <@if HIFI_USE_NORMALMAP@>
                    <$declareMaterialTextures(ALBEDO, ROUGHNESS, NORMAL, METALLIC, EMISSIVE, OCCLUSION)$>
                <@else@>
                    <$declareMaterialTextures(ALBEDO, ROUGHNESS, _SCRIBE_NULL, METALLIC, EMISSIVE, OCCLUSION)$>
                <@endif@>
            <@else@>
                <@if HIFI_USE_NORMALMAP@>
                    <$declareMaterialTextures(ALBEDO, ROUGHNESS, NORMAL, METALLIC, EMISSIVE, OCCLUSION, SCATTERING)$>
                <@else@>
                    <$declareMaterialTextures(ALBEDO, ROUGHNESS, _SCRIBE_NULL, METALLIC, EMISSIVE, OCCLUSION, SCATTERING)$>
                <@endif@>
            <@endif@>
        <@else@>
            <@if HIFI_USE_NORMALMAP@>
                <$declareMaterialTextures(ALBEDO, ROUGHNESS, NORMAL, METALLIC)$>
            <@else@>
                <$declareMaterialTextures(ALBEDO, ROUGHNESS, _SCRIBE_NULL, METALLIC)$>
            <@endif@>
            <$declareMaterialLightmap()$>
        <@endif@>
    <@endif@>
<@endif@>

<@if HIFI_USE_TRIPLANAR@>
    struct TriplanarParams {
        vec4 scale;
    };

    LAYOUT(binding=GRAPHICS_BUFFER_TRIPLANAR_SCALE) uniform triplanarParamsBuffer {
        TriplanarParams triplanarParams;
    };
<@endif@>

<@if not HIFI_USE_SHADOW@>
    <@if HIFI_USE_MTOON@>
        <@include DefaultMaterials.slh@>
        <@include GlobalLight.slh@>
        <$declareEvalGlobalLightingAlphaBlendedMToon()$>

        <@include gpu/Transform.slh@>
        <$declareStandardCameraTransform()$>
    <@elif HIFI_USE_FORWARD or HIFI_USE_TRANSLUCENT@>
        <@include DefaultMaterials.slh@>
        <@include GlobalLight.slh@>
        <@if HIFI_USE_LIGHTMAP@>
            <$declareEvalLightmappedColor()$>
        <@elif HIFI_USE_TRANSLUCENT@>
            <@if not HIFI_USE_FORWARD@>
                <@include LightLocal.slh@>
            <@endif@>
            <$declareEvalGlobalLightingAlphaBlended()$>
        <@else@>
            <$declareEvalSkyboxGlobalColor(_SCRIBE_NULL, 1)$>
        <@endif@>
        <@include gpu/Transform.slh@>
        <$declareStandardCameraTransform()$>
    <@endif@>

    <@if HIFI_USE_FORWARD@>
        OUTPUT(0, vec4, _fragColor0);
    <@else@>
        <@include DeferredBufferWrite.slh@>
    <@endif@>
<@else@>
    <@if HIFI_USE_MIRROR@>
        <@if HIFI_USE_FORWARD@>
            OUTPUT(0, vec4, _fragColor0);
        <@else@>
            <@include DeferredBufferWrite.slh@>
        <@endif@>
    <@else@>
         OUTPUT(0, vec4, _fragColor0);
    <@endif@>
<@endif@>

<@if HIFI_USE_UNLIT@>
    <@include LightingModel.slh@>
<@endif@>

<@if HIFI_USE_FADE@>
    <@include Fade.slh@>
    <$declareFadeFragment()$>
<@endif@>

<@if HIFI_USE_NORMALMAP and HIFI_USE_TRIPLANAR@>
    <@include gpu/Transform.slh@>
    <$declareStandardObjectTransform()$>
<@endif@>

INPUT(RENDER_UTILS_ATTR_POSITION_WS, vec4, _positionWS);
INPUT(RENDER_UTILS_ATTR_TEXCOORD01, vec4, _texCoord01[NUM_LAYERS]);
#define _texCoords mat2[NUM_LAYERS](                \
    mat2(_texCoord01[0].xy, _texCoord01[0].zw)      \
<@if HIFI_USE_LAYERS2 or HIFI_USE_LAYERS3@>
    , mat2(_texCoord01[1].xy, _texCoord01[1].zw)    \
<@endif@>
<@if HIFI_USE_LAYERS3@>
    , mat2(_texCoord01[2].xy, _texCoord01[2].zw)    \
<@endif@>
)

<@if not HIFI_USE_SHADOW@>
    INPUT(RENDER_UTILS_ATTR_POSITION_ES, vec4, _positionES);
    INPUT(RENDER_UTILS_ATTR_NORMAL_WS, vec3, _normalWS);
    <@if not HIFI_USE_MTOON@>
        INPUT(RENDER_UTILS_ATTR_COLOR, vec4, _color);
    <@endif@>
    layout(location=RENDER_UTILS_ATTR_PREV_POSITION_CS) in vec4 _prevPositionCS;
    <@if not HIFI_USE_TRIPLANAR@>
        <@if HIFI_USE_NORMALMAP@>
            INPUT(RENDER_UTILS_ATTR_TANGENT_WS, vec3, _tangentWS);
        <@endif@>
    <@endif@>
<@endif@>
<@if HIFI_USE_TRIPLANAR@>
    layout(location=RENDER_UTILS_ATTR_POSITION_MS) in vec3 _positionMS;
    layout(location=RENDER_UTILS_ATTR_NORMAL_MS) in vec3 _normalMS;
<@endif@>

void main(void) {
<@if HIFI_USE_FADE@>
    <@if not HIFI_USE_SHADOW@>
        vec3 fadeEmissive;
        FadeObjectParams fadeParams;
        <$fetchFadeObjectParams(fadeParams)$>
        applyFade(fadeParams, _positionWS.xyz, fadeEmissive);
    <@else@>
        FadeObjectParams fadeParams;
        <$fetchFadeObjectParams(fadeParams)$>
        applyFadeClip(fadeParams, _positionWS.xyz);
    <@endif@>
<@endif@>

<@if not HIFI_USE_SHADOW@>
    vec3 normalWS = normalize(_normalWS);
<@endif@>

    Material mats[NUM_LAYERS];
    BITFIELD matKeys[NUM_LAYERS];
    for (int layer = 0; layer < NUM_LAYERS; layer++) {
        Material mat = getMaterial(layer);
        mats[layer] = mat;
        matKeys[layer] = getMaterialKey(mat);
    }
<@if HIFI_USE_SHADOW or HIFI_USE_UNLIT@>
    <@if not HIFI_USE_TRIPLANAR@>
        <@if not HIFI_USE_MTOON@>
            <$fetchMaterialTextures(0, matKeys[0], _texCoords[0], albedoTex)$>
        <@else@>
            <$fetchMToonMaterialTextures(0, matKeys[0], _texCoords[0], albedoTex)$>
        <@endif@>
    <@else@>
        vec3 triplanarScale = triplanarParams.scale.xyz;
        <@if not HIFI_USE_MTOON@>
            <$fetchMaterialTexturesTriplanar(matKeys, _positionMS, _normalMS, _SCRIBE_NULL, _texCoord01, triplanarScale, albedoTex)$>
        <@else@>
            <$fetchMToonMaterialTexturesTriplanar(matKeys, _positionMS, _normalMS, _SCRIBE_NULL, _texCoord01, triplanarScale, albedoTex)$>
        <@endif@>
    <@endif@>

        float cutoff = getMaterialOpacityCutoff(mats[0]);
    <@if HIFI_USE_TRANSLUCENT@>
        float opacity = getMaterialOpacity(mats[0]);
        <@if not HIFI_USE_MTOON@>
            opacity *= _color.a;
        <@endif@>
        <$evalMaterialOpacity(albedoTex.a, cutoff, opacity, matKeys[0], opacity)$>;
        <$discardInvisible(opacity)$>;
    <@else@>
        float opacity = 1.0;
        <$evalMaterialOpacityMask(albedoTex.a, cutoff, opacity, matKeys[0], opacity)$>;
        <$discardTransparent(opacity)$>;
    <@endif@>

    <@if not HIFI_USE_SHADOW@>
            vec3 albedo = getMaterialAlbedo(mats[0]);
            <$evalMaterialAlbedo(albedoTex, albedo, matKeys[0], albedo)$>;
            <@if not HIFI_USE_MTOON@>
                albedo *= _color.rgb;
            <@endif@>
        <@if HIFI_USE_FADE@>
                albedo += fadeEmissive;
        <@endif@>
    <@endif@>

    <@if HIFI_USE_MIRROR@>
            vec3 mirrorColor = texelFetch(mirrorMap, ivec2(gl_FragCoord.xy), 0).rgb;
            <@if HIFI_USE_FORWARD@>
                _fragColor0 = vec4(mirrorColor, 1.0);
            <@else@>
                // Mirrors have AA disabled
                packDeferredFragmentUnlit(vec4(0.0, 0.0, 0.0, 1.0), vec3(1.0, 0.0, 0.0), 1.0, mirrorColor);
            <@endif@>
    <@elif HIFI_USE_SHADOW@>
            _fragColor0 = vec4(1.0);
    <@elif HIFI_USE_FORWARD@>
            _fragColor0 = vec4(albedo * isUnlitEnabled(), opacity);
    <@elif HIFI_USE_TRANSLUCENT@>
            packDeferredFragmentTranslucentUnlit(
                _prevPositionCS,
                evalFrontOrBackFaceNormal(normalWS),
                opacity,
                albedo * isUnlitEnabled());
    <@else@>
            packDeferredFragmentUnlit(
                _prevPositionCS,
                evalFrontOrBackFaceNormal(normalWS),
                opacity,
                albedo * isUnlitEnabled());
    <@endif@>
<@elif HIFI_USE_MTOON@>
        vec3 uvScrollSpeed = getMaterialUVScrollSpeed(mats[0]);
        float time = getMaterialTime(mats[0]); // time is only stored in the first material
    <@if HIFI_USE_NORMALMAP@>
        <$fetchMToonMaterialTextures(0, matKeys[0], _texCoords[0], albedoTex, normalTex, shadeTex, emissiveTex, shadingShiftTex, rimTex, uvScrollSpeed, time)$>
    <@else@>
        <$fetchMToonMaterialTextures(0, matKeys[0], _texCoords[0], albedoTex, _SCRIBE_NULL, shadeTex, emissiveTex, shadingShiftTex, rimTex, uvScrollSpeed, time)$>
    <@endif@>

        float cutoff = getMaterialOpacityCutoff(mats[0]);
        <@if HIFI_USE_TRANSLUCENT@>
            float opacity = getMaterialOpacity(mats[0]);
            <$evalMaterialOpacity(albedoTex.a, cutoff, opacity, matKeys[0], opacity)$>;
            <$discardInvisible(opacity)$>;
        <@else@>
            float opacity = 1.0;
            <$evalMaterialOpacityMask(albedoTex.a, cutoff, opacity, matKeys[0], opacity)$>;
            <$discardTransparent(opacity)$>;
        <@endif@>

        vec3 albedo = getMaterialAlbedo(mats[0]);
        <$evalMaterialAlbedo(albedoTex, albedo, matKeys[0], albedo)$>;

        vec3 emissive = getMaterialEmissive(mats[0]);
        <$evalMaterialEmissive(emissiveTex, emissive, matKeys[0], emissive)$>;

    <@if HIFI_USE_NORMALMAP@>
            vec3 fragNormalWS;
        <@if not HIFI_USE_TRIPLANAR@>
                <$evalMaterialNormalLOD(_positionES, normalTex, normalWS, _tangentWS, fragNormalWS)$>
        <@else@>
                <$evalMaterialNormalLODTriplanar(_positionES, normalTex, normalWS, fragNormalWS)$>
        <@endif@>
    <@else@>
            vec3 fragNormalWS = normalWS;
    <@endif@>
        fragNormalWS = evalFrontOrBackFaceNormal(fragNormalWS);

        vec3 shade = getMaterialShade(mats[0]);
        <$evalMaterialShade(shadeTex, shade, matKeys[0], shade)$>;

        float shadingShift = getMaterialShadingShift(mats[0]);
        <$evalMaterialShadingShift(shadingShiftTex, shadingShift, matKeys[0], shadingShift)$>;

        TransformCamera cam = getTransformCamera();
        float metallic = DEFAULT_METALLIC;
        vec3 fresnel = getFresnelF0(metallic, albedo);

        vec4 color = vec4(evalGlobalLightingAlphaBlendedMToon(
            cam._viewInverse, 1.0, _positionES.xyz, fragNormalWS,
            albedo, fresnel, metallic, emissive, DEFAULT_ROUGHNESS, opacity,
            shade, shadingShift, getMaterialShadingToony(mats[0]), getMaterialMatcap(mats[0]), getMaterialParametricRim(mats[0]),
            getMaterialParametricRimFresnelPower(mats[0]), getMaterialParametricRimLift(mats[0]), rimTex, getMaterialRimLightingMix(mats[0]), matKeys[0]), opacity);

        <@if HIFI_USE_FORWARD@>
            _fragColor0 = isUnlitEnabled() * vec4(color.rgb
            <@if HIFI_USE_FADE@>
                    + fadeEmissive
            <@endif@>
                , color.a);
        <@elif HIFI_USE_TRANSLUCENT@>
            packDeferredFragmentTranslucent(
                _prevPositionCS,
                fragNormalWS,
                color.a,
                color.rgb
                <@if HIFI_USE_FADE@>
                    + fadeEmissive
                <@endif@>
                , DEFAULT_ROUGHNESS);
        <@else@>
            packDeferredFragmentUnlit(
                _prevPositionCS,
                fragNormalWS,
                1.0,
                color.rgb
            <@if HIFI_USE_FADE@>
                    + fadeEmissive
            <@endif@>
                );
        <@endif@>

<@else@>
    <@if not HIFI_USE_TRIPLANAR@>
        <@if not HIFI_USE_LIGHTMAP@>
            <@if HIFI_USE_NORMALMAP and HIFI_USE_TRANSLUCENT@>
                <$fetchMaterialTextures(0, matKeys[0], _texCoords[0], albedoTex, roughnessTex, normalTex, metallicTex, emissiveTex, _SCRIBE_NULL, occlusionTex)$>
            <@elif HIFI_USE_NORMALMAP@>
                <$fetchMaterialTextures(0, matKeys[0], _texCoords[0], albedoTex, roughnessTex, normalTex, metallicTex, emissiveTex, scatteringTex, occlusionTex)$>
            <@elif HIFI_USE_TRANSLUCENT@>
                <$fetchMaterialTextures(0, matKeys[0], _texCoords[0], albedoTex, roughnessTex, _SCRIBE_NULL, metallicTex, emissiveTex, _SCRIBE_NULL, occlusionTex)$>
            <@else@>
                <$fetchMaterialTextures(0, matKeys[0], _texCoords[0], albedoTex, roughnessTex, _SCRIBE_NULL, metallicTex, emissiveTex, scatteringTex, occlusionTex)$>
            <@endif@>
        <@else@>
            <@if HIFI_USE_NORMALMAP@>
                <$fetchMaterialTextures(0, matKeys[0], _texCoords[0], albedoTex, roughnessTex, normalTex, metallicTex, _SCRIBE_NULL, _SCRIBE_NULL, _SCRIBE_NULL, lightmap)$>
            <@else@>
                <$fetchMaterialTextures(0, matKeys[0], _texCoords[0], albedoTex, roughnessTex, _SCRIBE_NULL, metallicTex, _SCRIBE_NULL, _SCRIBE_NULL, _SCRIBE_NULL, lightmap)$>
            <@endif@>
        <@endif@>
    <@else@>
        vec3 triplanarScale = triplanarParams.scale.xyz;
        <@if not HIFI_USE_LIGHTMAP@>
            <@if HIFI_USE_NORMALMAP and HIFI_USE_TRANSLUCENT@>
                <$fetchMaterialTexturesTriplanar(matKeys, _positionMS, _normalMS, normalWS, _texCoord01, triplanarScale, albedoTex, roughnessTex, normalTex, metallicTex, emissiveTex, _SCRIBE_NULL, occlusionTex)$>
            <@elif HIFI_USE_NORMALMAP@>
                <$fetchMaterialTexturesTriplanar(matKeys, _positionMS, _normalMS, normalWS, _texCoord01, triplanarScale, albedoTex, roughnessTex, normalTex, metallicTex, emissiveTex, scatteringTex, occlusionTex)$>
            <@elif HIFI_USE_TRANSLUCENT@>
                <$fetchMaterialTexturesTriplanar(matKeys, _positionMS, _normalMS, _SCRIBE_NULL, _texCoord01, triplanarScale, albedoTex, roughnessTex, _SCRIBE_NULL, metallicTex, emissiveTex, _SCRIBE_NULL, occlusionTex)$>
            <@else@>
                <$fetchMaterialTexturesTriplanar(matKeys, _positionMS, _normalMS, _SCRIBE_NULL, _texCoord01, triplanarScale, albedoTex, roughnessTex, _SCRIBE_NULL, metallicTex, emissiveTex, scatteringTex, occlusionTex)$>
            <@endif@>
        <@else@>
            <@if HIFI_USE_NORMALMAP@>
                <$fetchMaterialTexturesTriplanar(matKeys, _positionMS, _normalMS, normalWS, _texCoord01, triplanarScale, albedoTex, roughnessTex, normalTex, metallicTex, _SCRIBE_NULL, _SCRIBE_NULL, _SCRIBE_NULL, lightmap)$>
            <@else@>
                <$fetchMaterialTexturesTriplanar(matKeys, _positionMS, _normalMS, _SCRIBE_NULL, _texCoord01, triplanarScale, albedoTex, roughnessTex, _SCRIBE_NULL, metallicTex, _SCRIBE_NULL, _SCRIBE_NULL, _SCRIBE_NULL, lightmap)$>
            <@endif@>
        <@endif@>
    <@endif@>
    
        float cutoff = getMaterialOpacityCutoff(mats[0]);
    <@if HIFI_USE_TRANSLUCENT@>
        float opacity = getMaterialOpacity(mats[0]) * _color.a;
        <$evalMaterialOpacity(albedoTex.a, cutoff, opacity, matKeys[0], opacity)$>;
        <$discardInvisible(opacity)$>;
    <@else@>
        float opacity = 1.0;
        <$evalMaterialOpacityMask(albedoTex.a, cutoff, opacity, matKeys[0], opacity)$>;
        <$discardTransparent(opacity)$>;
    <@endif@>

        vec3 albedo = getMaterialAlbedo(mats[0]);
        <$evalMaterialAlbedo(albedoTex, albedo, matKeys[0], albedo)$>;
        albedo *= _color.rgb;

        float roughness = getMaterialRoughness(mats[0]);
        <$evalMaterialRoughness(roughnessTex, roughness, matKeys[0], roughness)$>;

        float metallic = getMaterialMetallic(mats[0]);
        <$evalMaterialMetallic(metallicTex, metallic, matKeys[0], metallic)$>;

    <@if not HIFI_USE_LIGHTMAP@>
            vec3 emissive = getMaterialEmissive(mats[0]);
            <$evalMaterialEmissive(emissiveTex, emissive, matKeys[0], emissive)$>;

            float occlusion = DEFAULT_OCCLUSION;
            <$evalMaterialOcclusion(occlusionTex, matKeys[0], occlusion)$>;

        <@if not HIFI_USE_TRANSLUCENT@>
                float scattering = getMaterialScattering(mats[0]);
                <$evalMaterialScattering(scatteringTex, scattering, matKeys[0], scattering)$>;
        <@endif@>
    <@endif@>

    <@if HIFI_USE_NORMALMAP@>
            vec3 fragNormalWS;
        <@if not HIFI_USE_TRIPLANAR@>
                <$evalMaterialNormalLOD(_positionES, normalTex, normalWS, _tangentWS, fragNormalWS)$>
        <@else@>
                <$evalMaterialNormalLODTriplanar(_positionES, normalTex, normalWS, fragNormalWS)$>
        <@endif@>
    <@else@>
            vec3 fragNormalWS = normalWS;
    <@endif@>
        fragNormalWS = evalFrontOrBackFaceNormal(fragNormalWS);

    <@if HIFI_USE_FORWARD@>
        TransformCamera cam = getTransformCamera();
        vec3 fresnel = getFresnelF0(metallic, albedo);
        <@if not HIFI_USE_TRANSLUCENT@>
            <@if not HIFI_USE_LIGHTMAP@>
                vec4 color = vec4(evalSkyboxGlobalColor(
                    cam._viewInverse,
                    1.0,
                    occlusion,
                    _positionES.xyz,
                    fragNormalWS,
                    albedo,
                    fresnel,
                    metallic,
                    roughness),
                    opacity);
                color.rgb += emissive * isEmissiveEnabled();
                _fragColor0 = color;
            <@else@>
                _fragColor0 = vec4(evalLightmappedColor(
                    cam._viewInverse,
                    1.0,
                    DEFAULT_OCCLUSION,
                    fragNormalWS,
                    albedo,
                    lightmap),
                    opacity);
            <@endif@>
        <@else@>
            <@if not HIFI_USE_LIGHTMAP@>
                _fragColor0 =  vec4(evalGlobalLightingAlphaBlended(
                    cam._viewInverse,
                    1.0,
                    occlusion,
                    _positionES.xyz,
                    fragNormalWS,
                    albedo,
                    fresnel,
                    metallic,
                    emissive,
                    roughness, opacity),
                    opacity);
            <@else@>
                _fragColor0 = vec4(evalLightmappedColor(
                cam._viewInverse,
                1.0,
                DEFAULT_OCCLUSION,
                fragNormalWS,
                albedo,
                lightmap),
                opacity);
            <@endif@>
        <@endif@>
    <@else@>
        <@if not HIFI_USE_TRANSLUCENT@>
            <@if not HIFI_USE_LIGHTMAP@>
                packDeferredFragment(
                    _prevPositionCS,
                    fragNormalWS,
                    opacity,
                    albedo,
                    roughness,
                    metallic,
                    emissive
                <@if HIFI_USE_FADE@>
                        + fadeEmissive
                <@endif@>
                    ,
                    occlusion,
                    scattering);
            <@else@>
                packDeferredFragmentLightmap(
                    _prevPositionCS,
                    fragNormalWS,
                    evalOpaqueFinalAlpha(getMaterialOpacity(mats[0]), opacity),
                    albedo,
                    roughness,
                    metallic,
                    lightmap
                <@if HIFI_USE_FADE@>
                        + fadeEmissive
                <@endif@>
                    );
            <@endif@>
        <@else@>
            TransformCamera cam = getTransformCamera();
            <@if not HIFI_USE_LIGHTMAP@>
                vec3 fresnel = getFresnelF0(metallic, albedo);

                vec3 fragPositionWS = _positionWS.xyz;
                vec3 fragToEyeWS = cam._viewInverse[3].xyz - fragPositionWS;
                vec3 fragToEyeDirWS = normalize(fragToEyeWS);
                SurfaceData surfaceWS = initSurfaceData(roughness, fragNormalWS, fragToEyeDirWS);

                vec4 localLighting = vec4(0.0);
                <$fetchClusterInfo(_positionWS)$>;
                if (hasLocalLights(numLights, clusterPos, dims)) {
                    localLighting = evalLocalLighting(cluster, numLights, fragPositionWS, surfaceWS,
                                                      metallic, fresnel, albedo, 0.0,
                                                      vec4(0), vec4(0), opacity);
                }

                vec4 outColor = vec4(evalGlobalLightingAlphaBlended(
                    cam._viewInverse,
                    1.0,
                    occlusion,
                    _positionES.xyz,
                    fragNormalWS,
                    albedo,
                    fresnel,
                    metallic,
                    emissive
                <@if HIFI_USE_FADE@>
                        + fadeEmissive
                <@endif@>
                    ,
                    surfaceWS, opacity, localLighting.rgb),
                    opacity);
                packDeferredFragmentTranslucent(_prevPositionCS, fragNormalWS, outColor.a, outColor.rgb, roughness);
            <@else@>
                vec4 outColor = vec4(evalLightmappedColor(
                    cam._viewInverse,
                    1.0,
                    DEFAULT_OCCLUSION,
                    fragNormalWS,
                    albedo,
                    lightmap),
                    opacity);
                packDeferredFragmentLightmap(_prevPositionCS, fragNormalWS, outColor.a, outColor.rgb, roughness, metallic, outColor.rgb);
            <@endif@>
        <@endif@>
    <@endif@>
<@endif@>
}
