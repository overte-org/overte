<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  Generated on <$_SCRIBE_DATE$>
//
//  fxaa.frag
//  fragment shader
//
//  Created by Raffi Bedikian on 8/30/15
//  Copyright 2015 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

// FXAA shader, GLSL code adapted from:
// http://horde3d.org/wiki/index.php5?title=Shading_Technique_-_FXAA
// Whitepaper describing the technique:
// http://developer.download.nvidia.com/assets/gamedev/files/sdk/11/FXAA_WhitePaper.pdf

#ifdef GL_ES
precision mediump float;
precision mediump int;
#endif

TEXTURE(0, sampler2D, colorTexture);
//uniform sampler2D historyTexture;

// FIXME make into a uniform buffer or push constant if this shader ever comes into use
vec2 texcoordOffset = vec2(0.0);

INPUT(0, vec2, varTexCoord0);
OUTPUT(0, vec4, outFragColor);
//OUTPUT(0, vec4, outFragHistory);

void main() {
    outFragColor = vec4(texture(colorTexture, varTexCoord0).xyz, 1.0/8.0);

    // v2
     /*   float ModulationFactor = 1.0 / 8.0;

        vec3 History = textureLod(historyTexture, varTexCoord0, 0.0).rgb;
        vec3 CurrentSubpixel = textureLod(colorTexture, varTexCoord0, 0.0).rgb;
    /*
        vec3 NearColor0 = textureLodOffset(colorTexture, varTexCoord0, 0.0, ivec2(1, 0)).xyz;
        vec3 NearColor1 = textureLodOffset(colorTexture, varTexCoord0, 0.0, ivec2(0, 1)).xyz;
        vec3 NearColor2 = textureLodOffset(colorTexture, varTexCoord0, 0.0, ivec2(-1, 0)).xyz;
        vec3 NearColor3 = textureLodOffset(colorTexture, varTexCoord0, 0.0, ivec2(0, -1)).xyz;

        vec3 BoxMin = min(CurrentSubpixel, min(NearColor0, min(NearColor1, min(NearColor2, NearColor3))));
        vec3 BoxMax = max(CurrentSubpixel, max(NearColor0, max(NearColor1, max(NearColor2, NearColor3))));;

        if (gl_FragCoord.x > 800) {
            History = clamp(History, BoxMin, BoxMax);
        }

        History = mix(CurrentSubpixel, History, ModulationFactor);

       /* outFragHistory.xyz = History;
        outFragHistory.w = ModulationFactor

        outFragColor.xyz = History;
        outFragColor.w = 1.0;*/



        /*  } else {
              outFragColor.xyz = CurrentSubpixel;
              outFragColor.w = 1.0;

          }*/
    if (gl_FragCoord.x > 800.0) {
     /*  // filter width limit for dependent "two-tap" texture samples
        float FXAA_SPAN_MAX = 8.0;

        // local contrast multiplier for performing AA
        // higher = sharper, but setting this value too high will cause near-vertical and near-horizontal edges to fail
        // see "fxaaQualityEdgeThreshold"
        float FXAA_REDUCE_MUL = 1.0 / 8.0;

        // luminance threshold for processing dark colors
        // see "fxaaQualityEdgeThresholdMin"
        float FXAA_REDUCE_MIN = 1.0 / 128.0;

        // fetch raw RGB values for nearby locations
        // sampling pattern is "five on a die" (each diagonal direction and the center)
        // computing the coordinates for these texture reads could be moved to the vertex shader for speed if needed
        vec3 rgbNW = texture(colorTexture, varTexCoord0 + (vec2(-1.0, -1.0) * texcoordOffset)).xyz;
        vec3 rgbNE = texture(colorTexture, varTexCoord0 + (vec2(+1.0, -1.0) * texcoordOffset)).xyz;
        vec3 rgbSW = texture(colorTexture, varTexCoord0 + (vec2(-1.0, +1.0) * texcoordOffset)).xyz;
        vec3 rgbSE = texture(colorTexture, varTexCoord0 + (vec2(+1.0, +1.0) * texcoordOffset)).xyz;
        vec3 rgbM = texture(colorTexture, varTexCoord0).xyz;

        // convert RGB values to luminance
        vec3 luma = vec3(0.299, 0.587, 0.114);
        float lumaNW = dot(rgbNW, luma);
        float lumaNE = dot(rgbNE, luma);
        float lumaSW = dot(rgbSW, luma);
        float lumaSE = dot(rgbSE, luma);
        float lumaM = dot(rgbM, luma);

        // luma range of local neighborhood
        float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));
        float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));

        // direction perpendicular to local luma gradient
        vec2 dir;
        dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));
        dir.y = ((lumaNW + lumaSW) - (lumaNE + lumaSE));

        // compute clamped direction offset for additional "two-tap" samples
        // longer vector = blurry, shorter vector = sharp
        float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) * (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);
        float rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);
        dir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX),
            max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX), dir * rcpDirMin)) * texcoordOffset;

        // perform additional texture sampling perpendicular to gradient
        vec3 rgbA = (1.0 / 2.0) * (
            texture(colorTexture, varTexCoord0 + dir * (1.0 / 3.0 - 0.5)).xyz +
            texture(colorTexture, varTexCoord0 + dir * (2.0 / 3.0 - 0.5)).xyz);
        vec3 rgbB = rgbA * (1.0 / 2.0) + (1.0 / 4.0) * (
            texture(colorTexture, varTexCoord0 + dir * (0.0 / 3.0 - 0.5)).xyz +
            texture(colorTexture, varTexCoord0 + dir * (3.0 / 3.0 - 0.5)).xyz);
        float lumaB = dot(rgbB, luma);

        // compare luma of new samples to the luma range of the original neighborhood
        // if the new samples exceed this range, just use the first two samples instead of all four
        if (lumaB < lumaMin || lumaB > lumaMax) {
            outFragColor.xyz = rgbA;
        }
        else {
            outFragColor.xyz = rgbB;
        }*/
        outFragColor.a = 1.0;
    }
}
