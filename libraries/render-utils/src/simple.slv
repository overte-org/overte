<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  <$_SCRIBE_FILENAME$>
//  Generated on <$_SCRIBE_DATE$>
//
//  Created by Andrzej Kapolka on 9/15/14.
//  Copyright 2014 High Fidelity, Inc.
//  Copyright 2024 Overte e.V.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

<@include gpu/Inputs.slh@>
<@include gpu/Color.slh@>
<@include gpu/Transform.slh@>
<$declareStandardTransform()$>

<@include render-utils/ShaderConstants.h@>

<@if HIFI_USE_FADE@>
    <@include Fade.slh@>
    <$declareFadeVertexInstanced()$>

    layout(location=RENDER_UTILS_ATTR_POSITION_WS) out vec4 _positionWS;
<@elif HIFI_USE_FORWARD or HIFI_USE_TRANSLUCENT@>
    layout(location=RENDER_UTILS_ATTR_POSITION_WS) out vec4 _positionWS;
<@endif@>

<@if HIFI_USE_FORWARD or HIFI_USE_TRANSLUCENT@>
    <@if not HIFI_USE_UNLIT@>
        layout(location=RENDER_UTILS_ATTR_POSITION_ES) out vec4 _positionES;
    <@endif@>
<@endif@>
<@if not HIFI_USE_FORWARD@>
    layout(location=RENDER_UTILS_ATTR_PREV_POSITION_CS) out vec4 _prevPositionCS;
<@endif@>
layout(location=RENDER_UTILS_ATTR_NORMAL_WS) out vec3 _normalWS;
layout(location=RENDER_UTILS_ATTR_COLOR) out vec4 _color;
layout(location=RENDER_UTILS_ATTR_TEXCOORD01) out vec4 _texCoord01;

void main(void) {
    _color = color_sRGBAToLinear(inColor);
    _texCoord01 = vec4(inTexCoord0.st, 0.0, 0.0);

    TransformCamera cam = getTransformCamera();
    TransformObject obj = getTransformObject();
<@if HIFI_USE_FORWARD or HIFI_USE_TRANSLUCENT@>
    <@if not HIFI_USE_UNLIT@>
        <$transformModelToEyeWorldAlignedPos(cam, obj, inPosition, _positionES)$>
    <@endif@>
<@endif@>
<@if not HIFI_USE_FORWARD@>
    <$transformModelToClipPosAndPrevClipPos(cam, obj, inPosition, gl_Position, _prevPositionCS)$>
<@else@>
    <$transformModelToClipPos(cam, obj, inPosition, gl_Position)$>
<@endif@>

<@if HIFI_USE_FADE@>
    <$transformModelToWorldPos(obj, inPosition, _positionWS)$>
    <$passThroughFadeObjectParams()$>
<@elif HIFI_USE_FORWARD or HIFI_USE_TRANSLUCENT@>
    <$transformModelToWorldPos(obj, inPosition, _positionWS)$>
<@endif@>
    <$transformModelToWorldDir(obj, inNormal.xyz, _normalWS)$>
}
