<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  <$_SCRIBE_FILENAME$>
//  Generated on <$_SCRIBE_DATE$>
//
//  Created by Andrzej Kapolka on 9/15/14.
//  Copyright 2014 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

<@include gpu/ShaderConstants.h@>
INPUT(GPU_ATTR_POSITION, vec4, inPosition);
INPUT(GPU_ATTR_NORMAL, vec4, inNormal);
INPUT(GPU_ATTR_COLOR, vec4, inColor);
INPUT(GPU_ATTR_TEXCOORD0, vec4, inTexCoord0);
<@if HIFI_USE_FADE@>
    INPUT(GPU_ATTR_TEXCOORD2, vec4, inTexCoord2);
    INPUT(GPU_ATTR_TEXCOORD3, vec4, inTexCoord3);
    INPUT(GPU_ATTR_TEXCOORD4, vec4, inTexCoord4);
<@endif@>

<@include gpu/Color.slh@>
<@include gpu/Transform.slh@>
<$declareStandardTransform()$>

<@include render-utils/ShaderConstants.h@>

<@if HIFI_USE_FADE@>
    <@include Fade.slh@>
    <$declareFadeVertexInstanced()$>

    OUTPUT(RENDER_UTILS_ATTR_POSITION_WS, vec4, _positionWS);
<@endif@>

<@if not HIFI_USE_UNLIT@>
    <@if HIFI_USE_FORWARD or HIFI_USE_TRANSLUCENT@>
        OUTPUT(RENDER_UTILS_ATTR_POSITION_ES, vec4, _positionES);
    <@endif@>
<@endif@>
OUTPUT(RENDER_UTILS_ATTR_NORMAL_WS, vec3, _normalWS);
OUTPUT(RENDER_UTILS_ATTR_COLOR, vec4, _color);
OUTPUT(RENDER_UTILS_ATTR_TEXCOORD01, vec4, _texCoord01);

void main(void) {
    _color = color_sRGBAToLinear(inColor);
    _texCoord01 = vec4(inTexCoord0.st, 0.0, 0.0);

    TransformCamera cam = getTransformCamera();
    TransformObject obj = getTransformObject();
<@if not HIFI_USE_UNLIT@>
    <@if HIFI_USE_FORWARD or HIFI_USE_TRANSLUCENT@>
        <$transformModelToEyeAndClipPos(cam, obj, inPosition, _positionES, gl_Position)$>
    <@else@>
        <$transformModelToClipPos(cam, obj, inPosition, gl_Position)$>
    <@endif@>
<@else@>
    <$transformModelToClipPos(cam, obj, inPosition, gl_Position)$>
<@endif@>

<@if HIFI_USE_FADE@>
    <$transformModelToWorldPos(obj, inPosition, _positionWS)$>
    <$passThroughFadeObjectParams()$>
<@endif@>
    <$transformModelToWorldDir(cam, obj, inNormal.xyz, _normalWS)$>
}
