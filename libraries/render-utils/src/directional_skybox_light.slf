<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  <$_SCRIBE_FILENAME$>
//  Generated on <$_SCRIBE_DATE$>
//
//  Created by Sam Gateau on 5/8/2015.
//  Copyright 2016 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

<@include DeferredBufferRead.slh@>
<@include render-utils/ShaderConstants.h@>

<@include GlobalLight.slh@>
<@if HIFI_USE_AMBIENT@>
    <$declareEvalAmbientSphereGlobalColor(supportScattering)$>
<@else@>
    <$declareEvalSkyboxGlobalColor(supportScattering, _SCRIBE_NULL)$>
<@endif@>

<@if HIFI_USE_SHADOW@>
    <@include Shadow.slh@>
<@endif@>

INPUT(RENDER_UTILS_ATTR_TEXCOORD01, vec4, _texCoord01);
#define _texCoord0 _texCoord01.xy
#define _texCoord1 _texCoord01.zw
OUTPUT(0, vec4, _fragColor);

void main(void) {
    DeferredFrameTransform deferredTransform = getDeferredFrameTransform();
    DeferredFragment frag = unpackDeferredFragment(deferredTransform, _texCoord0);

<@if HIFI_USE_SHADOW@>
    vec4 viewPos = vec4(frag.position.xyz, 1.0);
    vec4 worldPos = getViewInverse() * viewPos;
    Light shadowLight = getKeyLight();
    vec3 worldLightDirection = getLightDirection(shadowLight);
    float shadowAttenuation = evalShadowAttenuation(worldLightDirection, worldPos, -viewPos.z, frag.normal);
<@else@>
    float shadowAttenuation = 1.0;
<@endif@>

    // Light mapped or not ?
    if (frag.mode == FRAG_MODE_UNLIT || frag.mode == FRAG_MODE_LIGHTMAPPED) {
        discard;
    } else {
        vec4 midNormalCurvature = vec4(0);
        vec4 lowNormalCurvature = vec4(0);
        unpackMidLowNormalCurvature(_texCoord0, midNormalCurvature, lowNormalCurvature);
        float check = float(frag.mode == FRAG_MODE_SCATTERING);
        midNormalCurvature = check * midNormalCurvature;
        lowNormalCurvature = check * lowNormalCurvature;

<@if HIFI_USE_AMBIENT@>
        vec3 color = evalAmbientSphereGlobalColor(
                        getViewInverse(),
                        shadowAttenuation,
                        frag.obscurance,
                        frag.position.xyz,
                        frag.normal,
                        frag.albedo,
                        frag.fresnel,
                        frag.metallic,
                        frag.roughness,
                        frag.scattering,
                        midNormalCurvature,
                        lowNormalCurvature);
<@else@>
        vec3 color = evalSkyboxGlobalColor(
                        getViewInverse(),
                        shadowAttenuation,
                        frag.obscurance,
                        frag.position.xyz,
                        frag.normal,
                        frag.albedo,
                        frag.fresnel,
                        frag.metallic,
                        frag.roughness,
                        frag.scattering,
                        midNormalCurvature,
                        lowNormalCurvature);
<@endif@>

        _fragColor = vec4(color, 1.0);
    }
}
