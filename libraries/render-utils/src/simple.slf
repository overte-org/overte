<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  <$_SCRIBE_FILENAME$>
//  Generated on <$_SCRIBE_DATE$>
//
//  Created by Andrzej Kapolka on 9/15/14.
//  Copyright 2014 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

<@include gpu/Color.slh@>
<@include DefaultMaterials.slh@>
<@include render-utils/ShaderConstants.h@>
<@include CullFace.slh@>

<@if HIFI_USE_FORWARD or HIFI_USE_TRANSLUCENT@>
    <@if not HIFI_USE_UNLIT@>
        <@include gpu/Transform.slh@>
        <$declareStandardCameraTransform()$>
    <@else@>
        <@include LightingModel.slh@>
<@endif@>

    OUTPUT(0, vec4, _fragColor0);
<@endif@>

<@if not HIFI_USE_UNLIT@>
    <@if HIFI_USE_TRANSLUCENT@>
        <@include GlobalLight.slh@>
        <$declareEvalGlobalLightingAlphaBlended()$>
    <@elif HIFI_USE_FORWARD@>
        <@include GlobalLight.slh@>
        <$declareEvalSkyboxGlobalColor(_SCRIBE_NULL, HIFI_USE_FORWARD)$>
    <@else@>
        <@include DeferredBufferWrite.slh@>
    <@endif@>
<@else@>
    <@if not HIFI_USE_FORWARD@>
        <@if not HIFI_USE_TRANSLUCENT@>
            <@include DeferredBufferWrite.slh@>
        <@endif@>
    <@endif@>
<@endif@>

<@if HIFI_USE_FADE@>
    <@include Fade.slh@>
    <$declareFadeFragmentInstanced()$>
<@endif@>

<@if not HIFI_USE_UNLIT@>
    <@if HIFI_USE_FORWARD or HIFI_USE_TRANSLUCENT@>
        INPUT(RENDER_UTILS_ATTR_POSITION_ES, vec4, _positionES);
    <@endif@>
<@endif@>
<@if HIFI_USE_FADE@>
    INPUT(RENDER_UTILS_ATTR_POSITION_WS, vec4, _positionWS);
<@endif@>
INPUT(RENDER_UTILS_ATTR_NORMAL_WS, vec3, _normalWS);
INPUT(RENDER_UTILS_ATTR_COLOR, vec4, _color);
INPUT(RENDER_UTILS_ATTR_TEXCOORD01, vec4, _texCoord01);
#define _texCoord0 _texCoord01.xy
#define _texCoord1 _texCoord01.zw

TEXTURE(0, sampler2D, simpleTexture);

void main(void) {
    vec4 texel = texture(simpleTexture, _texCoord0);
    texel = mix(texel, color_sRGBAToLinear(texel), float(_color.a <= 0.0));
    texel.rgb *= _color.rgb;
    texel.a *= abs(_color.a);

<@if HIFI_USE_FADE@>
    vec3 fadeEmissive;
    FadeObjectParams fadeParams;
    <$fetchFadeObjectParamsInstanced(fadeParams)$>
    applyFade(fadeParams, _positionWS.xyz, fadeEmissive);
<@endif@>

<@if not HIFI_USE_UNLIT@>
    <@if HIFI_USE_FORWARD or HIFI_USE_TRANSLUCENT@>
        float metallic = DEFAULT_METALLIC;
        vec3 fresnel = getFresnelF0(metallic, texel.rgb);

        TransformCamera cam = getTransformCamera();
        vec3 fragPosition = _positionES.xyz;
    <@endif@>
<@endif@>

<@if not HIFI_USE_UNLIT@>
    <@if HIFI_USE_TRANSLUCENT@>
        _fragColor0 = vec4(evalGlobalLightingAlphaBlended(
            cam._viewInverse,
            1.0,
            DEFAULT_OCCLUSION,
            fragPosition,
            evalFrontOrBackFaceNormal(normalize(_normalWS)),
            texel.rgb,
            fresnel,
            metallic,
            DEFAULT_EMISSIVE
        <@if HIFI_USE_FADE@>
                + fadeEmissive
        <@endif@>
            ,
            DEFAULT_ROUGHNESS, texel.a),
            texel.a);
    <@elif HIFI_USE_FORWARD@>
        _fragColor0 = vec4(evalSkyboxGlobalColor(
            cam._viewInverse,
            1.0,
            DEFAULT_OCCLUSION,
            fragPosition,
            evalFrontOrBackFaceNormal(normalize(_normalWS)),
            texel.rgb,
            fresnel,
            metallic,
            DEFAULT_ROUGHNESS),
            texel.a);
    <@else@>
        packDeferredFragment(
            evalFrontOrBackFaceNormal(normalize(_normalWS)),
            1.0,
            texel.rgb,
            DEFAULT_ROUGHNESS,
            DEFAULT_METALLIC,
            DEFAULT_EMISSIVE
        <@if HIFI_USE_FADE@>
                + fadeEmissive
        <@endif@>
            ,
            DEFAULT_OCCLUSION,
            DEFAULT_SCATTERING);
    <@endif@>
<@else@>
    <@if HIFI_USE_FORWARD or HIFI_USE_TRANSLUCENT@>
        _fragColor0 = isUnlitEnabled() * vec4(texel.rgb
        <@if HIFI_USE_FADE@>
                + fadeEmissive
        <@endif@>
            , texel.a);
    <@else@>
        packDeferredFragmentUnlit(
            evalFrontOrBackFaceNormal(normalize(_normalWS)),
            1.0,
            texel.rgb
        <@if HIFI_USE_FADE@>
                + fadeEmissive
        <@endif@>
            );
    <@endif@>
<@endif@>
}
