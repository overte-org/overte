<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  Generated on <$_SCRIBE_DATE$>
//
//  debug_deferred_buffer.frag
//  fragment shader
//
//  Created by Clement on 12/3
//  Copyright 2015 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

<@include DeferredBufferRead.slh@>
<@include gpu/Color.slh@>
<$declareColorWheel()$>

TEXTURE(RENDER_UTILS_DEBUG_TEXTURE0, sampler2D, debugTexture0);
TEXTURE(RENDER_UTILS_TEXTURE_SHADOW, sampler2DArrayShadow, shadowMaps);

<@include ShadowCore.slh@>

<$declareDeferredCurvature()$>

<@include debug_deferred_buffer_shared.slh@>

UNIFORM_BUFFER(RENDER_UTILS_BUFFER_DEBUG_DEFERRED_PARAMS, parametersBuffer) {
    DebugParameters parameters;
};

float curvatureAO(float k) {
    return 1.0f - (0.0022f * k * k) + (0.0776f * k) + 0.7369f;
}

INPUT(0, vec2, uv);
OUTPUT(0, vec4, outFragColor);

//SOURCE_PLACEHOLDER_BEGIN
vec4 getFragmentColor() {
    DeferredFragment frag = unpackDeferredFragmentNoPosition(uv);
    return vec4(pow(frag.albedo, vec3(1.0 / 2.2)), 1.0);
}
//SOURCE_PLACEHOLDER_END


void main(void) {
    outFragColor = getFragmentColor();
}