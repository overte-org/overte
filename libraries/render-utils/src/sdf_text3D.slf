<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  <$_SCRIBE_FILENAME$>
//  Generated on <$_SCRIBE_DATE$>
//
//  Created by Bradley Austin Davis on 2015-02-04
//  Copyright 2015 High Fidelity, Inc.
//  Copyright 2024 Overte e.V.
//
//  Based on fragment shader code from 
//  https://github.com/paulhoux/Cinder-Samples/blob/master/TextRendering/include/text/Text.cpp 
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html

<@if HIFI_USE_TRANSLUCENT or HIFI_USE_FORWARD@>
    <@include DefaultMaterials.slh@>

    <@include GlobalLight.slh@>
    <@include LightLocal.slh@>
    <$declareEvalGlobalLightingAlphaBlended()$>

    <@include gpu/Transform.slh@>
    <$declareStandardCameraTransform()$>

    <@include CullFace.slh@>
    layout(location=RENDER_UTILS_ATTR_POSITION_WS) in vec4 _positionWS;
<@endif@>

<@if HIFI_USE_FORWARD@>
    layout(location=0) out vec4 _fragColor0;
<@else@>
    <@include DeferredBufferWrite.slh@>
<@endif@>

<@include render-utils/ShaderConstants.h@>

<@include sdf_text3D.slh@>
<$declareEvalSDFSuperSampled()$>

layout(location=RENDER_UTILS_ATTR_POSITION_MS) in vec2 _positionMS;
<@if HIFI_USE_TRANSLUCENT or HIFI_USE_FORWARD@>
    layout(location=RENDER_UTILS_ATTR_POSITION_ES) in vec4 _positionES;
<@endif@>
<@if not HIFI_USE_FORWARD@>
    layout(location=RENDER_UTILS_ATTR_PREV_POSITION_CS) in vec4 _prevPositionCS;
<@endif@>
layout(location=RENDER_UTILS_ATTR_NORMAL_WS) in vec3 _normalWS;
layout(location=RENDER_UTILS_ATTR_TEXCOORD01) in vec4 _texCoord01;
#define _texCoord0 _texCoord01.xy
#define _texCoord1 _texCoord01.zw
 // we're reusing the fade texcoord locations here:
layout(location=RENDER_UTILS_ATTR_FADE1) flat in vec4 _glyphBounds;
layout(location=RENDER_UTILS_ATTR_FADE2) flat in float _isTofu;

<@if HIFI_USE_MIRROR@>
    <@include graphics/ShaderConstants.h@>

    LAYOUT(binding=GRAPHICS_TEXTURE_MATERIAL_MIRROR) uniform sampler2D mirrorMap;
<@endif@>

void main() {
    vec4 color = evalSDFSuperSampled(_texCoord0, _positionMS, _glyphBounds, _isTofu);

<@if HIFI_USE_TRANSLUCENT or HIFI_USE_FORWARD@>
    color.a *= params.color.a;
    if (color.a <= 0.0) {
        discard;
    }
<@endif@>

<@if HIFI_USE_MIRROR@>
    color.rgb = texelFetch(mirrorMap, ivec2(gl_FragCoord.xy), 0).rgb;
    color.a = 1.0;
<@endif@>

    vec3 normal = normalize(_normalWS);

<@if HIFI_USE_UNLIT@>
    vec4 outColor = vec4(color.rgb * isUnlitEnabled(), color.a);

    <@if HIFI_USE_FORWARD@>
        _fragColor0 = outColor;
    <@elif HIFI_USE_TRANSLUCENT@>
        packDeferredFragmentTranslucent(_prevPositionCS, normal, outColor.a, outColor.rgb, DEFAULT_ROUGHNESS);
    <@else@>
        packDeferredFragmentUnlit(
            _prevPositionCS,
            normal,
            outColor.a,
            outColor.rgb);
    <@endif@>
<@else@>
    <@if HIFI_USE_TRANSLUCENT or HIFI_USE_FORWARD@>
        float metallic = DEFAULT_METALLIC;
        vec3 fresnel = getFresnelF0(metallic, color.rgb);

        TransformCamera cam = getTransformCamera();
        vec3 fragPosition = _positionES.xyz;

        vec3 fragNormalWS = evalFrontOrBackFaceNormal(normalize(_normalWS));
        vec3 fragPositionWS = _positionWS.xyz;
        vec3 fragToEyeWS = cam._viewInverse[3].xyz - fragPositionWS;
        vec3 fragToEyeDirWS = normalize(fragToEyeWS);
        SurfaceData surfaceWS = initSurfaceData(DEFAULT_ROUGHNESS, fragNormalWS, fragToEyeDirWS);

        vec4 localLighting = vec4(0.0);
        <$fetchClusterInfo(_positionWS)$>
        if (hasLocalLights(numLights, clusterPos, dims)) {
            localLighting = evalLocalLighting(cluster, numLights, fragPositionWS, surfaceWS,
                                              metallic, fresnel, color.rgb, 0.0,
                                              vec4(0), vec4(0), color.a);
        }

        vec4 outColor = vec4(evalGlobalLightingAlphaBlended(
            cam._viewInverse,
            1.0,
            DEFAULT_OCCLUSION,
            _positionES.xyz,
            fragNormalWS,
            color.rgb,
            fresnel,
            metallic,
            DEFAULT_EMISSIVE,
            surfaceWS, color.a, localLighting.rgb),
            color.a);

        <@if HIFI_USE_FORWARD@>
            _fragColor0 = outColor;
        <@else@>
            packDeferredFragmentTranslucent(_prevPositionCS, normal, outColor.a, outColor.rgb, DEFAULT_ROUGHNESS);
        <@endif@>
    <@else@>
        packDeferredFragment(
            _prevPositionCS,
            normal,
            color.a,
            color.rgb,
            DEFAULT_ROUGHNESS,
            DEFAULT_METALLIC,
            DEFAULT_EMISSIVE,
            DEFAULT_OCCLUSION,
            DEFAULT_SCATTERING);
    <@endif@>
<@endif@>
}
