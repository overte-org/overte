<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  Generated on <$_SCRIBE_DATE$>
//
//  drawItemStatus.vert
//  vertex shader
//
//  Created by Sam Gateau on 6/30/2015.
//  Copyright 2015 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

<@include gpu/Transform.slh@>
<@include gpu/ShaderConstants.h@>

<$declareStandardTransform()$>

OUTPUT(0, vec4, varColor);
OUTPUT(1, vec3, varTexcoord);

INPUT(0, vec3, inBoundPos);
INPUT(1, vec3, inBoundDim);
INPUT(2, ivec4, inStatus0);
INPUT(3, ivec4, inStatus1);

vec3 paintRainbow(float normalizedHue) {
    float v = normalizedHue * 6.f;
    if (v < 0.f) {
        return vec3(1.f, 0.f, 0.f);
    } else if (v < 1.f) {
        return vec3(1.f, v, 0.f);
    } else if (v < 2.f) {
        return vec3(1.f - (v-1.f), 1.f, 0.f);
    } else if (v < 3.f) {
        return vec3(0.f, 1.f, (v-2.f));
    } else if (v < 4.f) {
        return vec3(0.f, 1.f - (v-3.f), 1.f );
    } else if (v < 5.f) {
        return vec3((v-4.f), 0.f, 1.f );
    } else if (v < 6.f) {
        return vec3(1.f, 0.f, 1.f - (v-5.f));
    } else {
        return vec3(1.f, 0.f, 0.f);
    }
}

const int INVALID_STATUS = int(0xFFFFFFFF);
const int MAX_NUM_ICONS = 8;
const int ICONS_PER_ROW = 4;

int getIconStatus(int icon) {
    if (icon < ICONS_PER_ROW) {
        return inStatus0[icon];
    } else if (icon < MAX_NUM_ICONS) {
        return inStatus1[icon - ICONS_PER_ROW];
    }
    return INVALID_STATUS;
}

vec3 unpackStatus(int v) {
    return vec3(clamp(float(int((v >> 0) & 0xFFFF) - 32727) / 32727.0, -1.0, 1.0),
                clamp(float(uint((v >> 16) & 0xFF)) / 255.0, 0.0, 1.0),
                clamp(float(int((v >> 24) & 0xFF)), 0.0, 255.0));
}

void main(void) {
    const int NUM_VERTICES_PER_ICON = 6;
    const vec4 UNIT_QUAD[NUM_VERTICES_PER_ICON] = vec4[NUM_VERTICES_PER_ICON](
        vec4(-1.0, -1.0, 0.0, 1.0),
        vec4(1.0, -1.0, 0.0, 1.0),
        vec4(-1.0, 1.0, 0.0, 1.0),
        vec4(-1.0, 1.0, 0.0, 1.0),
        vec4(1.0, -1.0, 0.0, 1.0),
        vec4(1.0, 1.0, 0.0, 1.0)
    );

    const vec2 ICON_PIXEL_SIZE = vec2(36, 36);
    const vec2 MARGIN_PIXEL_SIZE = vec2(2, 2);
    const vec2 ICON_GRID_SLOTS[MAX_NUM_ICONS] = vec2[MAX_NUM_ICONS](vec2(-1.5, 0.5),
                                                                    vec2(-0.5, 0.5),
                                                                    vec2(0.5, 0.5),
                                                                    vec2(1.5, 0.5),
                                                                    vec2(-1.5,-0.5),
                                                                    vec2(-0.5,-0.5),
                                                                    vec2(0.5, -0.5),
                                                                    vec2(1.5, -0.5));

    // anchor point in clip space
    vec4 anchorPoint = vec4(inBoundPos, 1.0) + vec4(inBoundDim, 0.0) * vec4(0.5, 0.5, 0.5, 0.0);
    TransformCamera cam = getTransformCamera();
    TransformObject obj = getTransformObject();
    <$transformModelToClipPos(cam, obj, anchorPoint, anchorPoint)$>

    // Which icon are we dealing with ?
    int iconNum = gl_VertexID / NUM_VERTICES_PER_ICON;
    int packedIconStatus = getIconStatus(iconNum);

    // if invalid, just kill
    if (packedIconStatus == INVALID_STATUS) {
        gl_Position = anchorPoint;
        varColor = vec4(1.0);
        return;
    }

    // Which quad vertex pos?
    int twoTriID = gl_VertexID - iconNum * NUM_VERTICES_PER_ICON;
    vec4 quadPos = UNIT_QUAD[twoTriID];

    // unpack to get x and y satus
    vec3 iconStatus = unpackStatus(packedIconStatus);

    // Use the status for showing a color
    varColor = vec4(paintRainbow(abs(iconStatus.y)), 1.0);

    // Pass the texcoord and the z texcoord is representing the texture icon
    varTexcoord = vec3( (quadPos.x + 1.0) * 0.5, (quadPos.y + 1.0) * -0.5, iconStatus.z);

    // Also changes the size of the notification
    vec2 iconScale = ICON_PIXEL_SIZE;
    iconScale = max(vec2(0, 0), (iconScale * iconStatus.x));

    //Offset icon to the right based on the iconNum
    vec2 gridOffset = ICON_GRID_SLOTS[iconNum];
    vec2 offset = gridOffset * (ICON_PIXEL_SIZE + MARGIN_PIXEL_SIZE);

    // Final position in pixel space
    vec2 quadPixelPos = offset.xy + quadPos.xy * 0.5 * iconScale;

    vec4 viewport;
    <$transformCameraViewport(cam, viewport)$>;
    vec2 pixelToClip = vec2(2.0 / viewport.z, 2.0 / viewport.w);
    gl_Position = anchorPoint + (anchorPoint.w * vec4(quadPixelPos * pixelToClip, 0.0, 0.0));

}
