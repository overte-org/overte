<!
//  Material.slh
//  fragment shader
//
//  Created by Sam Gateau on 12/16/14.
//  Copyright 2013 High Fidelity, Inc.
//  Copyright 2024 Overte e.V.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
!>
<@if not MODEL_MATERIAL_SLH@>
<@def MODEL_MATERIAL_SLH@>

<@include graphics/ShaderConstants.h@>

const int MAX_TEXCOORDS = 2;

struct TexMapArray { 
    mat4 _texcoordTransforms0;
    mat4 _texcoordTransforms1;
    vec2 _materialParams;
<@if not HIFI_USE_MTOON@>
    vec2 _lightmapParams;
<@endif@>
};

<@func declareMaterialTexMapArrayBuffer()@>

<@func evalTexMapArrayTexcoord0(texMapArray, inTexcoord0, worldPosition, outTexcoord0)@>
{
    <$outTexcoord0$> = mix(<$texMapArray$>._texcoordTransforms0 * vec4(<$inTexcoord0$>.st, 0.0, 1.0),
                           <$texMapArray$>._texcoordTransforms0 * <$worldPosition$> + vec4(0.5),
                           <$texMapArray$>._materialParams.x).st;
}
<@endfunc@>

<@func evalTexMapArrayTexcoord1(texMapArray, inTexcoord1, worldPosition, outTexcoord1)@>
{
    <$outTexcoord1$> = mix(<$texMapArray$>._texcoordTransforms1 * vec4(<$inTexcoord1$>.st, 0.0, 1.0),
                           <$texMapArray$>._texcoordTransforms1 * <$worldPosition$> + vec4(0.5),
                           <$texMapArray$>._materialParams.x).st;
}
<@endfunc@>

<@endfunc@>

// The material values (at least the material key) must be precisely bitwise accurate
// to what is provided by the uniform buffer, or the material key has the wrong bits

<@if not HIFI_USE_MTOON@>
struct Material {
    vec4 _emissiveOpacity;
    vec4 _albedoRoughness;
    vec4 _metallicScatteringOpacityCutoffKey;
};
<@else@>
struct Material {
    vec4 _emissiveOpacity;
    vec4 _albedoOpacityCutoff;

    vec4 _shadeShadingShift;
    vec4 _matcapShadingToony;
    vec4 _parametricRimAndFresnelPower;
    vec4 _parametricRimLiftMixUVAnimationScrollSpeedXY;
    vec4 _uvAnimationScrollRotationSpeedTimeKeySpare;
};
<@endif@>

UNIFORM_BUFFER(GRAPHICS_BUFFER_MATERIAL, materialBuffer) {
    Material _mat;
    TexMapArray _texMapArray;
};

Material getMaterial() {
    return _mat;
}
TexMapArray getTexMapArray() {
    return _texMapArray;
}

<@if not HIFI_USE_MTOON@>
    vec3 getMaterialEmissive(Material m) { return m._emissiveOpacity.rgb; }
    float getMaterialOpacity(Material m) { return m._emissiveOpacity.a; }

    vec3 getMaterialAlbedo(Material m) { return m._albedoRoughness.rgb; }
    float getMaterialRoughness(Material m) { return m._albedoRoughness.a; }
    float getMaterialShininess(Material m) { return 1.0 - getMaterialRoughness(m); }

    float getMaterialMetallic(Material m) { return m._metallicScatteringOpacityCutoffKey.x; }
    float getMaterialScattering(Material m) { return m._metallicScatteringOpacityCutoffKey.y; }
    float getMaterialOpacityCutoff(Material m) { return m._metallicScatteringOpacityCutoffKey.z; }

    BITFIELD getMaterialKey(Material m) { return floatBitsToInt(m._metallicScatteringOpacityCutoffKey.w); }

    const BITFIELD EMISSIVE_VAL_BIT              = 0x00000001;
    const BITFIELD UNLIT_VAL_BIT                 = 0x00000002;
    const BITFIELD ALBEDO_VAL_BIT                = 0x00000004;
    const BITFIELD METALLIC_VAL_BIT              = 0x00000008;
    const BITFIELD GLOSSY_VAL_BIT                = 0x00000010;
    const BITFIELD OPACITY_VAL_BIT               = 0x00000020;
    const BITFIELD OPACITY_MASK_MAP_BIT          = 0x00000040;
    const BITFIELD OPACITY_TRANSLUCENT_MAP_BIT   = 0x00000080;
    const BITFIELD OPACITY_MAP_MODE_BIT          = 0x00000100;
    const BITFIELD OPACITY_CUTOFF_VAL_BIT        = 0x00000200;
    const BITFIELD SCATTERING_VAL_BIT            = 0x00000400;


    const BITFIELD EMISSIVE_MAP_BIT              = 0x00000800;
    const BITFIELD ALBEDO_MAP_BIT                = 0x00001000;
    const BITFIELD METALLIC_MAP_BIT              = 0x00002000;
    const BITFIELD ROUGHNESS_MAP_BIT             = 0x00004000;
    const BITFIELD NORMAL_MAP_BIT                = 0x00008000;
    const BITFIELD OCCLUSION_MAP_BIT             = 0x00010000;
    const BITFIELD LIGHTMAP_MAP_BIT              = 0x00020000;
    const BITFIELD SCATTERING_MAP_BIT            = 0x00040000;
<@else@>
    vec3 getMaterialEmissive(Material m) { return m._emissiveOpacity.rgb; }
    float getMaterialOpacity(Material m) { return m._emissiveOpacity.a; }

    vec3 getMaterialAlbedo(Material m) { return m._albedoOpacityCutoff.rgb; }
    float getMaterialOpacityCutoff(Material m) { return m._albedoOpacityCutoff.z; }

    vec3 getMaterialShade(Material m) { return m._shadeShadingShift.rgb; }
    float getMaterialShadingShift(Material m) { return m._shadeShadingShift.a; }

    vec3 getMaterialMatcap(Material m) { return m._matcapShadingToony.rgb; }
    float getMaterialShadingToony(Material m) { return m._matcapShadingToony.a; }

    vec3 getMaterialParametricRim(Material m) { return m._parametricRimAndFresnelPower.rgb; }
    float getMaterialParametricRimFresnelPower(Material m) { return m._parametricRimAndFresnelPower.a; }

    float getMaterialParametricRimLift(Material m) { return m._parametricRimLiftMixUVAnimationScrollSpeedXY.r; }
    float getMaterialRimLightingMix(Material m) { return m._parametricRimLiftMixUVAnimationScrollSpeedXY.g; }

    vec3 getMaterialUVScrollSpeed(Material m) { return vec3(m._parametricRimLiftMixUVAnimationScrollSpeedXY.ba, m._uvAnimationScrollRotationSpeedTimeKeySpare.r); }
    float getMaterialTime(Material m) { return m._uvAnimationScrollRotationSpeedTimeKeySpare.g; }

    BITFIELD getMaterialKey(Material m) { return floatBitsToInt(m._uvAnimationScrollRotationSpeedTimeKeySpare.b); }

    const BITFIELD EMISSIVE_VAL_BIT              = 0x00000001;
    const BITFIELD SHADE_VAL_BIT                 = 0x00000002;
    const BITFIELD ALBEDO_VAL_BIT                = 0x00000004;
    const BITFIELD SHADING_SHIFT_VAL_BIT         = 0x00000008;
    const BITFIELD SHADING_TOONY_VAL_BIT         = 0x00000010;
    const BITFIELD OPACITY_VAL_BIT               = 0x00000020;
    const BITFIELD OPACITY_MASK_MAP_BIT          = 0x00000040;
    const BITFIELD OPACITY_TRANSLUCENT_MAP_BIT   = 0x00000080;
    const BITFIELD OPACITY_MAP_MODE_BIT          = 0x00000100;
    const BITFIELD OPACITY_CUTOFF_VAL_BIT        = 0x00000200;
    const BITFIELD UV_ANIMATION_SCROLL_VAL_BIT   = 0x00000400;

    const BITFIELD EMISSIVE_MAP_BIT              = 0x00000800;
    const BITFIELD ALBEDO_MAP_BIT                = 0x00001000;
    const BITFIELD SHADING_SHIFT_MAP_BIT         = 0x00002000;
    const BITFIELD SHADE_MAP_BIT                 = 0x00004000;
    const BITFIELD NORMAL_MAP_BIT                = 0x00008000;
    const BITFIELD MATCAP_MAP_BIT                = 0x00010000;
    const BITFIELD UV_ANIMATION_MASK_MAP_BIT     = 0x00020000;
    const BITFIELD RIM_MAP_BIT                   = 0x00040000;

    const BITFIELD MATCAP_VAL_BIT                = 0x00080000;
    const BITFIELD PARAMETRIC_RIM_VAL_BIT        = 0x00100000;
    const BITFIELD PARAMETRIC_RIM_POWER_VAL_BIT  = 0x00200000;
    const BITFIELD PARAMETRIC_RIM_LIFT_VAL_BIT   = 0x00400000;
    const BITFIELD RIM_LIGHTING_MIX_VAL_BIT      = 0x00800000;
<@endif@>

<@endif@>
