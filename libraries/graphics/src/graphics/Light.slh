<!
//  Light.slh
//  fragment shader
//
//  Created by Sam Gateau on 1/25/14.
//  Copyright 2013 High Fidelity, Inc.
//  Copyright 2024 Overte e.V.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
!>
<@if not MODEL_LIGHT_SLH@>
<@def MODEL_LIGHT_SLH@>

<@include graphics/ShaderConstants.h@>
<@include graphics/LightVolume.shared.slh@>
<@include graphics/LightIrradiance.shared.slh@>

// FIXME: For legacy reasons, when blend is 0.5, this is equivalent to:
// color * texel
// It should actually be:
// mix(color, texel, blend)
// and the blend factor should be user controlled
vec3 applySkyboxColorMix(vec3 texel, vec3 color, float blend) {
    return mix(vec3(1.0), texel, float(blend > 0.0)) * mix(vec3(1.0), color, float(blend < 1.0));
}

// Now let's define Light
struct Light {
    LightVolume volume;
    LightIrradiance irradiance;
};

bool light_isSpot(Light l) { return lightVolume_isSpot(l.volume); }

vec3 getLightPosition(Light l) { return lightVolume_getPosition(l.volume); }
vec3 getLightDirection(Light l) { return lightVolume_getDirection(l.volume); }

vec3 getLightColor(Light l) { return lightIrradiance_getColor(l.irradiance); }
float getLightIntensity(Light l) { return lightIrradiance_getIntensity(l.irradiance); }
vec3 getLightIrradiance(Light l) { return lightIrradiance_getIrradiance(l.irradiance); }

// Ambient lighting needs extra info provided from a different Buffer
<@include graphics/SphericalHarmonics.shared.slh@>
// Light Ambient

struct LightAmbient {
    vec4 _ambientColor;
    vec4 _ambientInfo;
    SphericalHarmonics _ambientSphere;
    mat4 transform;
};

SphericalHarmonics getLightAmbientSphere(LightAmbient l) { return l._ambientSphere; }

vec3 getLightAmbientColor(LightAmbient l) { return l._ambientColor.xyz; }
float getLightAmbientBlend(LightAmbient l) { return l._ambientColor.w; }
float getLightAmbientIntensity(LightAmbient l) { return l._ambientInfo.x; }
bool getLightHasAmbientMap(LightAmbient l) { return l._ambientInfo.y > 0.0; }
float getLightAmbientMapNumMips(LightAmbient l) { return l._ambientInfo.y; }

<@func declareLightBuffer(N)@>


<@if N@>
UNIFORM_BUFFER(GRAPHICS_BUFFER_LIGHT, lightBuffer) {
    Light lightArray[<$N$>];
};
Light getLight(int index) {
    return lightArray[index];
}

<@else@>
UNIFORM_BUFFER(GRAPHICS_BUFFER_KEY_LIGHT, keyLightBuffer) {
    Light light;
};
Light getKeyLight() {
    return light;
}

<@endif@>

<@endfunc@>


<@func declareLightAmbientBuffer(N)@>

<@if N@>

UNIFORM_BUFFER(GRAPHICS_BUFFER_AMBIENT_LIGHT, lightAmbientBuffer) {
    LightAmbient lightAmbientArray[<$N$>];
};

LightAmbient getLightAmbient(int index) {
    return lightAmbientArray[index];
}

<@else@>
UNIFORM_BUFFER(GRAPHICS_BUFFER_AMBIENT_LIGHT, lightAmbientBuffer) {
    LightAmbient lightAmbient;
};

LightAmbient getLightAmbient() {
    return lightAmbient;
}

<@endif@>

<@endfunc@>


<@endif@>
