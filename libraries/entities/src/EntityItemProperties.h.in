//
//  EntityItemProperties.h
//  libraries/entities/src
//
//  Created by Brad Hefta-Gaub on 12/4/13.
//  Copyright 2013 High Fidelity, Inc.
//  Copyright 2020 Vircadia contributors.
//  Copyright 2023 Overte e.V.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//  SPDX-License-Identifier: Apache-2.0
//

#ifndef hifi_EntityItemProperties_h
#define hifi_EntityItemProperties_h

#include <stdint.h>

#include <limits>
#include <type_traits>

#include <glm/glm.hpp>
#include <glm/gtx/component_wise.hpp>

#include <QtCore/QObject>
#include <QVector>
#include <QString>
#include <QDateTime>

#include <AACube.h>
#include <NumericalConstants.h>
#include <PropertyFlags.h>
#include <OctreeConstants.h>
#include <ShapeInfo.h>
#include <ColorUtils.h>
#include "FontFamilies.h"
#include <ScriptValue.h>

#include <EntityItemID.h>
#include "EntityItemPropertiesDefaults.h"
#include "EntityItemPropertiesMacros.h"
#include "EntityTypes.h"
#include "EntityPropertyFlags.h"
#include "EntityPseudoPropertyFlags.h"
#include "SimulationOwner.h"

@ENTITY_ITEM_PROPERTY_INCLUDES@

#include "MaterialMappingMode.h"
#include "BillboardMode.h"
#include "RenderLayer.h"
#include "PrimitiveMode.h"
#include "WebInputMode.h"
#include "GizmoType.h"
#include "TextEffect.h"
#include "TextAlignment.h"
#include "TextVerticalAlignment.h"
#include "MirrorMode.h"
#include "EntityShape.h"

class ScriptEngine;

/// A collection of properties of an entity item used in the scripting API. Translates between the actual properties of an
/// entity and a JavaScript style hash/ScriptValue storing a set of properties. Used in scripting to set/get the complete
/// set of entity item properties via JavaScript hashes/QScriptValues
/// all units for SI units (meter, second, radian, etc)
class EntityItemProperties {
    // TODO: consider removing these friend relationship and use public methods
@ENTITY_ITEM_PROPERTY_FRIENDS@
public:
    static bool blobToProperties(ScriptEngine& scriptEngine, const QByteArray& blob, EntityItemProperties& properties);
    static void propertiesToBlob(ScriptEngine& scriptEngine, const QUuid& myAvatarID, const EntityItemProperties& properties,
        QByteArray& blob, bool allProperties = false);

    EntityItemProperties(EntityPropertyFlags desiredProperties = EntityPropertyFlags());
    EntityItemProperties(const EntityItemProperties&) = default;

    virtual ~EntityItemProperties() = default;

    void merge(const EntityItemProperties& other);

    EntityTypes::EntityType getType() const { return _type; }
    void setType(EntityTypes::EntityType type) { _type = type; }

    virtual ScriptValue copyToScriptValue(ScriptEngine* engine, bool skipDefaults, bool allowUnknownCreateTime = false,
        bool strictSemantics = false, EntityPseudoPropertyFlags pseudoPropertyFlags = EntityPseudoPropertyFlags()) const;
    virtual void copyFromScriptValue(const ScriptValue& object, bool honorReadOnly);
    void copyFromJSONString(ScriptEngine& scriptEngine, const QString& jsonString);

    static ScriptValue entityPropertyFlagsToScriptValue(ScriptEngine* engine, const EntityPropertyFlags& flags);
    static bool entityPropertyFlagsFromScriptValue(const ScriptValue& object, EntityPropertyFlags& flags);

    static bool getPropertyInfo(const QString& propertyName, EntityPropertyInfo& propertyInfo);

    // editing related features supported by all entities
    quint64 getLastEdited() const { return _lastEdited; }
    float getEditedAgo() const /// Elapsed seconds since this entity was last edited
        { return (float)(usecTimestampNow() - getLastEdited()) / (float)USECS_PER_SECOND; }

    EntityPropertyFlags getChangedProperties() const;

    bool transformChanged() const;
    bool getScalesWithParent() const;
    bool parentRelatedPropertyChanged() const;
    bool queryAACubeRelatedPropertyChanged() const;
    bool grabbingRelatedPropertyChanged() const;

    AABox getAABox() const;

    void debugDump() const;
    void setLastEdited(quint64 usecTime);
    EntityPropertyFlags getDesiredProperties() { return _desiredProperties; }
    void setDesiredProperties(EntityPropertyFlags properties) {  _desiredProperties = properties; }

    bool constructFromBuffer(const unsigned char* data, int dataLength);

@ENTITY_ITEM_PROPERTY_DEFINES@

    static QString getComponentModeAsString(uint8_t mode);

public:
    float getMaxDimension() const { return glm::compMax(_dimensions); }

    float getAge() const { return (float)(usecTimestampNow() - _created) / (float)USECS_PER_SECOND; }
    bool hasCreatedTime() const { return (_created != UNKNOWN_CREATED_TIME); }

    bool containsBoundsProperties() const { return (_positionChanged || _dimensionsChanged); }
    bool containsPositionChange() const { return _positionChanged; }
    bool containsDimensionsChange() const { return _dimensionsChanged; }

    static OctreeElement::AppendState encodeEntityEditPacket(PacketType command, EntityItemID id, const EntityItemProperties& properties,
                                       QByteArray& buffer, EntityPropertyFlags requestedProperties, EntityPropertyFlags& didntFitProperties,
                                       EntityPropertyList& firstDidntFitProperty);

    static bool encodeEraseEntityMessage(const EntityItemID& entityItemID, QByteArray& buffer);
    static bool encodeCloneEntityMessage(const EntityItemID& entityIDToClone, const EntityItemID& newEntityID, QByteArray& buffer);
    static bool decodeCloneEntityMessage(const QByteArray& buffer, int& processedBytes, EntityItemID& entityIDToClone, EntityItemID& newEntityID);

    static bool decodeEntityEditPacket(const unsigned char* data, int bytesToRead, int& processedBytes,
                                       EntityItemID& entityID, EntityItemProperties& properties);

    void clearID() { _id = UNKNOWN_ENTITY_ID; _idSet = false; }
    void markAllChanged();

    const glm::vec3& getNaturalDimensions() const { return _naturalDimensions; }
    void setNaturalDimensions(const glm::vec3& value) { _naturalDimensions = value; }

    const glm::vec3& getNaturalPosition() const { return _naturalPosition; }
    void calculateNaturalPosition(const glm::vec3& min, const glm::vec3& max);

    const QVariantMap& getTextureNames() const { return _textureNames; }
    void setTextureNames(const QVariantMap& value) { _textureNames = value; }

    QString getSimulatorIDAsString() const { return _simulationOwner.getID().toString().mid(1,36).toUpper(); }

    void setVoxelDataDirty() { _voxelDataChanged = true; }

    void setLinePointsDirty() {_linePointsChanged = true; }

    void setQueryAACubeDirty() { _queryAACubeChanged = true; }

    void setLocationDirty() { _positionChanged = true; _rotationChanged = true; }

    bool hasTransformOrVelocityChanges() const;
    void clearTransformOrVelocityChanges();
    bool hasMiscPhysicsChanges() const;

    bool hasSimulationRestrictedChanges() const;
    void copySimulationRestrictedProperties(const EntityItemPointer& entity);
    void clearSimulationRestrictedProperties();

    void clearSimulationOwner();
    void setSimulationOwner(const QUuid& id, uint8_t priority);
    void setSimulationOwner(const QByteArray& data);
    void setSimulationPriority(uint8_t priority) { _simulationOwner.setPriority(priority); }
    uint8_t computeSimulationBidPriority() const;

    void setActionDataDirty() { _actionDataChanged = true; }

    QList<QString> listChangedProperties();

    bool getDimensionsInitialized() const { return _dimensionsInitialized; }
    void setDimensionsInitialized(bool dimensionsInitialized) { _dimensionsInitialized = dimensionsInitialized; }

    void setJointRotationsDirty() { _jointRotationsSetChanged = true; _jointRotationsChanged = true; }
    void setJointTranslationsDirty() { _jointTranslationsSetChanged = true; _jointTranslationsChanged = true; }

    // render info related items
    size_t getRenderInfoVertexCount() const { return _renderInfoVertexCount; }
    void setRenderInfoVertexCount(size_t value) { _renderInfoVertexCount = value; }
    int getRenderInfoTextureCount() const { return _renderInfoTextureCount; }
    void setRenderInfoTextureCount(int value) { _renderInfoTextureCount = value; }
    size_t getRenderInfoTextureSize() const { return _renderInfoTextureSize; }
    void setRenderInfoTextureSize(size_t value) { _renderInfoTextureSize = value; }
    int getRenderInfoDrawCalls() const { return _renderInfoDrawCalls; }
    void setRenderInfoDrawCalls(int value) { _renderInfoDrawCalls = value; }
    bool getRenderInfoHasTransparent() const { return _renderInfoHasTransparent; }
    void setRenderInfoHasTransparent(bool value) { _renderInfoHasTransparent = value; }

    void setPackedNormals(const QByteArray& value);
    QVector<glm::vec3> unpackNormals(const QByteArray& normals);

    void setPackedStrokeColors(const QByteArray& value);
    QVector<glm::vec3> unpackStrokeColors(const QByteArray& strokeColors);

    QByteArray getPackedNormals() const;
    QByteArray packNormals(const QVector<glm::vec3>& normals) const;

    QByteArray getPackedStrokeColors() const;
    QByteArray packStrokeColors(const QVector<glm::vec3>& strokeColors) const;

    void convertToCloneProperties(const EntityItemID& entityIDToClone);

protected:
    QString getCollisionMaskAsString() const;
    void setCollisionMaskFromString(const QString& maskString);

    QVector<QString> getTagsAsVector() const;
    void setTagsFromVector(const QVector<QString>& tags);

private:
    QUuid _id;
    bool _idSet;
    quint64 _lastEdited;
    EntityTypes::EntityType _type;
    void setType(const QString& typeName) { _type = EntityTypes::getEntityTypeFromName(typeName); }

    bool _defaultSettings;
    bool _dimensionsInitialized = true; // Only false if creating an entity locally with no dimensions properties

    // NOTE: The following are pseudo client only properties. They are only used in clients which can access
    // properties of model geometry. But these properties are not serialized like other properties.
    QVariantMap _textureNames;
    glm::vec3 _naturalDimensions;
    glm::vec3 _naturalPosition;

    size_t _renderInfoVertexCount { 0 };
    int _renderInfoTextureCount { 0 };
    size_t _renderInfoTextureSize { 0 };
    int _renderInfoDrawCalls { 0 };
    bool _renderInfoHasTransparent { false };

    EntityPropertyFlags _desiredProperties; // if set will narrow scopes of copy/to/from to just these properties
};

Q_DECLARE_METATYPE(EntityItemProperties);
ScriptValue EntityItemPropertiesToScriptValue(ScriptEngine* engine, const EntityItemProperties& properties);
ScriptValue EntityItemNonDefaultPropertiesToScriptValue(ScriptEngine* engine, const EntityItemProperties& properties);
bool EntityItemPropertiesFromScriptValueIgnoreReadOnly(const ScriptValue& object, EntityItemProperties& properties);
bool EntityItemPropertiesFromScriptValueHonorReadOnly(const ScriptValue& object, EntityItemProperties& properties);

Q_DECLARE_METATYPE(EntityPropertyFlags);
ScriptValue EntityPropertyFlagsToScriptValue(ScriptEngine* engine, const EntityPropertyFlags& flags);
bool EntityPropertyFlagsFromScriptValue(const ScriptValue& object, EntityPropertyFlags& flags);

Q_DECLARE_METATYPE(EntityPropertyInfo);
ScriptValue EntityPropertyInfoToScriptValue(ScriptEngine* engine, const EntityPropertyInfo& propertyInfo);
bool EntityPropertyInfoFromScriptValue(const ScriptValue& object, EntityPropertyInfo& propertyInfo);

// define these inline here so the macros work
inline void EntityItemProperties::setPosition(const glm::vec3& value)
                    { _position = glm::clamp(value, (float)-HALF_TREE_SCALE, (float)HALF_TREE_SCALE); _positionChanged = true; }

inline void EntityItemProperties::setOwningAvatarID(const QUuid& id) {
    _owningAvatarID = id;
    if (!_owningAvatarID.isNull()) {
        // for AvatarEntities there's no entity-server to tell us we're the simulation owner,
        // so always set the simulationOwner to the owningAvatarID and a high priority.
        setSimulationOwner(_owningAvatarID, AVATAR_ENTITY_SIMULATION_PRIORITY);
    }
    _owningAvatarIDChanged = true;
}

QDebug& operator<<(QDebug& dbg, const EntityPropertyFlags& f);

inline QDebug operator<<(QDebug debug, const EntityItemProperties& properties) {
    debug << "EntityItemProperties[" << "\n";

    debug << "    _type:" << properties.getType() << "\n";

@ENTITY_ITEM_PROPERTY_DEBUG@

    debug << "  last edited:" << properties.getLastEdited() << "\n";
    debug << "  edited ago:" << properties.getEditedAgo() << "\n";
    debug << "]";

    return debug;
}

#endif // hifi_EntityItemProperties_h
