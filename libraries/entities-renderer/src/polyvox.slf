<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  <$_SCRIBE_FILENAME$>
//  Generated on <$_SCRIBE_DATE$>
//
//  Created by Seth Alves on 2015-8-3
//  Copyright 2015 High Fidelity, Inc.
//  Copyright 2024 Overte e.V.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

<@if HIFI_USE_FADE@>
    <@include Fade.slh@>
    <$declareFadeFragment()$>

    layout(location=RENDER_UTILS_ATTR_POSITION_WS) in vec4 _positionWS;
<@endif@>

<@if not HIFI_USE_SHADOW@>
    <@include graphics/Material.slh@>
    <@include render-utils/ShaderConstants.h@>
    <@include entities-renderer/ShaderConstants.h@>

    <@if not HIFI_USE_FORWARD@>
        <@include DeferredBufferWrite.slh@>
    <@else@>
        <@include CullFace.slh@>
        <@include DefaultMaterials.slh@>

        <@include GlobalLight.slh@>
        <@include LightLocal.slh@>
        <$declareEvalGlobalLightingAlphaBlended()$>

        <@include gpu/Transform.slh@>
        <$declareStandardCameraTransform()$>
    <@endif@>

    <@if HIFI_USE_FORWARD@>
        layout(location=RENDER_UTILS_ATTR_POSITION_ES) in vec4 _positionES;

        <@if not HIFI_USE_FADE@>
            layout(location=RENDER_UTILS_ATTR_POSITION_WS) in vec4 _positionWS;
        <@endif@>
    <@else@>
        layout(location=RENDER_UTILS_ATTR_PREV_POSITION_CS) in vec4 _prevPositionCS;
    <@endif@>
    layout(location=RENDER_UTILS_ATTR_POSITION_MS) in vec3 _positionMS;
    layout(location=RENDER_UTILS_ATTR_NORMAL_WS) in vec3 _normalWS;

    LAYOUT(binding=ENTITIES_TEXTURE_POLYVOX_XMAP) uniform sampler2D xMap;
    LAYOUT(binding=ENTITIES_TEXTURE_POLYVOX_YMAP) uniform sampler2D yMap;
    LAYOUT(binding=ENTITIES_TEXTURE_POLYVOX_ZMAP) uniform sampler2D zMap;

    struct PolyvoxParams {
        vec4 voxelVolumeSize;
    };

    LAYOUT(binding=0) uniform polyvoxParamsBuffer {
        PolyvoxParams params;
    };
<@endif@>

<@if HIFI_USE_SHADOW or HIFI_USE_FORWARD@>
    layout(location=0) out vec4 _fragColor0;
<@endif@>

void main(void) {
<@if HIFI_USE_FADE@>
    <@if not HIFI_USE_SHADOW@>
        vec3 fadeEmissive;
        FadeObjectParams fadeParams;
        <$fetchFadeObjectParams(fadeParams)$>
        applyFade(fadeParams, _positionWS.xyz, fadeEmissive);
    <@else@>
        FadeObjectParams fadeParams;
        <$fetchFadeObjectParams(fadeParams)$>
        applyFadeClip(fadeParams, _positionWS.xyz);
    <@endif@>
<@endif@>

<@if not HIFI_USE_SHADOW@>
    float inPositionX = (_positionMS.x - 0.5) / params.voxelVolumeSize.x;
    float inPositionY = (_positionMS.y - 0.5) / params.voxelVolumeSize.y;
    float inPositionZ = (_positionMS.z - 0.5) / params.voxelVolumeSize.z;

    vec4 xyDiffuse = texture(xMap, vec2(-inPositionX, -inPositionY));
    vec4 xzDiffuse = texture(yMap, vec2(-inPositionX, inPositionZ));
    vec4 yzDiffuse = texture(zMap, vec2(inPositionZ, -inPositionY));

    vec3 normalMS = normalize(cross(dFdy(_positionMS.xyz), dFdx(_positionMS.xyz)));
    vec3 xyDiffuseScaled = xyDiffuse.rgb * abs(normalMS.z);
    vec3 xzDiffuseScaled = xzDiffuse.rgb * abs(normalMS.y);
    vec3 yzDiffuseScaled = yzDiffuse.rgb * abs(normalMS.x);
    vec3 diffuse = vec3(xyDiffuseScaled + xzDiffuseScaled + yzDiffuseScaled);

    <@if not HIFI_USE_FORWARD@>
        packDeferredFragment(
            _prevPositionCS,
            normalize(_normalWS),
            1.0,
            diffuse,
            DEFAULT_ROUGHNESS,
            DEFAULT_METALLIC,
            DEFAULT_EMISSIVE
        <@if HIFI_USE_FADE@>
                + fadeEmissive
        <@endif@>
            ,
            DEFAULT_OCCLUSION,
            DEFAULT_SCATTERING);
    <@else@>
        float metallic = DEFAULT_METALLIC;
        vec3 fresnel = getFresnelF0(metallic, diffuse);

        TransformCamera cam = getTransformCamera();

        vec3 fragNormalWS = evalFrontOrBackFaceNormal(normalize(_normalWS));
        vec3 fragPositionWS = _positionWS.xyz;
        vec3 fragToEyeWS = cam._viewInverse[3].xyz - fragPositionWS;
        vec3 fragToEyeDirWS = normalize(fragToEyeWS);
        SurfaceData surfaceWS = initSurfaceData(DEFAULT_ROUGHNESS, fragNormalWS, fragToEyeDirWS);

        vec4 localLighting = vec4(0.0);
        <$fetchClusterInfo(_positionWS)$>
        if (hasLocalLights(numLights, clusterPos, dims)) {
            localLighting = evalLocalLighting(cluster, numLights, fragPositionWS, surfaceWS,
                                              metallic, fresnel, diffuse, 0.0,
                                              vec4(0), vec4(0), 1.0);
        }

        vec4 color = vec4(evalGlobalLightingAlphaBlended(
            cam._viewInverse,
            1.0,
            DEFAULT_OCCLUSION,
            _positionES.xyz,
            fragNormalWS,
            diffuse,
            fresnel,
            metallic,
            DEFAULT_EMISSIVE
        <@if HIFI_USE_FADE@>
                + fadeEmissive
        <@endif@>
            ,
            surfaceWS, 1.0, localLighting.rgb),
            1.0);

        _fragColor0 = color;
    <@endif@>
<@else@>
    _fragColor0 = vec4(1.0);
<@endif@>
}
