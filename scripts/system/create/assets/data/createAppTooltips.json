{
    "shape": {
        "tooltip": "The shape of this entity's geometry."
    },
    "color": {
        "tooltip": "The color of this entity."
    },
    "shapeAlpha": {
        "tooltip": "The opacity of the entity between 0.0 fully transparent and 1.0 completely opaque."
    },
    "text": {
        "tooltip": "The text to display on the entity."
    },
    "textColor": {
        "tooltip": "The color of the text."
    },
    "textAlpha": {
        "tooltip": "The opacity of the text between 0.0 fully transparent and 1.0 completely opaque."
    },
    "backgroundColor": {
        "tooltip": "The color of the background."
    },
    "backgroundAlpha": {
        "tooltip": "The opacity of the background between 0.0 fully transparent and 1.0 completely opaque."
    },
    "lineHeight": {
        "tooltip": "The height of each line of text. This determines the size of the text."
    },
    "font": {
        "tooltip": "The font to render the text. Supported values: \"Courier\", \"Inconsolata\", \"Roboto\", \"Timeless\", or a URL to a .sdff file."
    },
    "textEffect": {
        "tooltip": "The effect that is applied to the text."
    },
    "textEffectColor": {
        "tooltip": "The color of the text effect."
    },
    "textEffectThickness": {
        "tooltip": "The magnitude of the text effect."
    },
    "textAlignment": {
        "tooltip": "How the text is aligned within its left and right bounds."
    },
    "topMargin": {
        "tooltip": "The top margin, in meters."
    },
    "rightMargin": {
        "tooltip": "The right margin, in meters."
    },
    "bottomMargin": {
        "tooltip": "The bottom margin, in meters."
    },
    "leftMargin": {
        "tooltip": "The left margin, in meters."
    },
    "unlit": {
        "tooltip": "If enabled, the entity will not be lit by the keylight or local lights.",
        "jsPropertyName": "unlit"
    },
    "zoneShapeType": {
        "tooltip": "The shape of the volume in which the zone's lighting effects and avatar permissions have effect.",
        "jsPropertyName": "shapeType"
    },
    "zoneCompoundShapeURL": {
        "tooltip": "The model file to use for the compound shape if Shape Type is \"Use Compound Shape URL\".",
        "jsPropertyName": "compoundShapeURL"
    },
    "flyingAllowed": {
        "tooltip": "If enabled, users can fly in the zone."
    },
    "ghostingAllowed": {
        "tooltip": "If enabled, users with avatar collisions turned off will not collide with content in the zone."
    },
    "filterURL": {
        "tooltip": "The URL of a JS file that checks for changes to entity properties within the zone. Runs periodically."
    },
    "keyLightMode": {
        "tooltip": "Configures the key light in the zone. This light is directional."
    },
    "keyLight.color": {
        "tooltip": "The color of the key light."
    },
    "keyLight.intensity": {
        "tooltip": "The intensity of the key light."
    },
    "keyLight.direction.y": {
        "tooltip": "The angle in deg at which light emits. Starts in the entity's -z direction, and rotates around its y axis."
    },
    "keyLight.direction.x": {
        "tooltip": "The angle in deg at which light emits. Starts in the entity's -z direction, and rotates around its x axis."
    },
    "keyLight.castShadows": {
        "tooltip": "If enabled, shadows are cast. The entity or avatar casting the shadow must also have Cast Shadows enabled. Note: Shadows are rendered only on high-profiled computers. This setting will have no effect on computers profiled to medium or low graphics."
    },
    "keyLight.shadowBias": {
        "tooltip": "The bias of the shadows cast by the light.  Use this to fine-tune your shadows to your scene to prevent shadow acne and peter panning."
    },
    "keyLight.shadowMaxDistance": {
        "tooltip": "The max distance from your view at which shadows will be computed."
    },
    "skyboxMode": {
        "tooltip": "Configures the skybox in the zone. The skybox is a cube map image."
    },
    "skybox.color": {
        "tooltip": "If the URL is blank, this changes the color of the sky, otherwise it modifies the color of the skybox."
    },
    "skybox.url": {
        "tooltip": "A cube map image that is used to render the sky."
    },
    "ambientLightMode": {
        "tooltip": "Configures the ambient light in the zone. Use this if you want your skybox to reflect light on the content."
    },
    "ambientLight.ambientIntensity": {
        "tooltip": "The intensity of the ambient light."
    },
    "ambientLight.ambientURL": {
        "tooltip": "A cube map image that defines the color of the light coming from each direction."
    },
    "hazeMode": {
        "tooltip": "Configures the haze in the scene."
    },
    "haze.hazeRange": {
        "tooltip": "How far the haze extends out. This is measured in meters."
    },
    "haze.hazeAltitudeEffect": {
        "tooltip": "If enabled, this adjusts the haze intensity as it gets higher."
    },
    "haze.hazeBaseRef": {
        "tooltip": "The base of the altitude range. Measured in entity space."
    },
    "haze.hazeCeiling": {
        "tooltip": "The ceiling of the altitude range. Measured in entity space."
    },
    "haze.hazeColor": {
        "tooltip": "The color of the haze."
    },
    "haze.hazeBackgroundBlend": {
        "tooltip": "How much the skybox shows through the haze. The higher the value, the more it shows through."
    },
    "haze.hazeEnableGlare": {
        "tooltip": "If enabled, a glare is enabled on the skybox, based on the key light."
    },
    "haze.hazeGlareColor": {
        "tooltip": "The color of the glare based on the key light."
    },
    "haze.hazeGlareAngle": {
        "tooltip": "The angular size of the glare and how much it encompasses the skybox, based on the key light."
    },
    "bloomMode": {
        "tooltip": "Configures how much bright areas of the scene glow."
    },
    "bloom.bloomIntensity": {
        "tooltip": "The intensity, or brightness, of the bloom effect."
    },
    "bloom.bloomThreshold": {
        "tooltip": "The cutoff of the bloom. The higher the value, the more only bright areas of the scene will glow."
    },
    "bloom.bloomSize": {
        "tooltip": "The radius of bloom. The higher the value, the larger the bloom."
    },
    "avatarPriority": {
        "tooltip": "Alter Avatars' update priorities."
    },
    "screenshare": {
        "tooltip": "Enable screen-sharing within this zone"
    },
    "modelURL": {
        "tooltip": "A mesh model from an FBX or OBJ file."
    },
    "shapeType": {
        "tooltip": "The shape of the collision hull used if collisions are enabled. This affects how an entity collides."
    },
    "compoundShapeURL": {
        "tooltip": "The model file to use for the compound shape if Collision Shape is \"Compound\"."
    },
    "animation.url": {
        "tooltip": "An animation to play on the model."
    },
    "animation.running": {
        "tooltip": "If enabled, the animation on the model will play automatically."
    },
    "animation.allowTranslation": {
        "tooltip": "If enabled, this allows an entity to move in space during an animation."
    },
    "animation.loop": {
        "tooltip": "If enabled, then the animation will continuously repeat."
    },
    "animation.hold": {
        "tooltip": "If enabled, then rotations and translations of the last frame played are maintained when the animation stops."
    },
    "animation.currentFrame": {
        "tooltip": "The current frame being played in the animation."
    },
    "animation.firstFrame": {
        "tooltip": "The first frame to play in the animation."
    },
    "animation.lastFrame": {
        "tooltip": "The last frame to play in the animation."
    },
    "animation.fps": {
        "tooltip": "The speed of the animation."
    },
    "textures": {
        "tooltip": "A JSON string containing a texture. Use a name from the Original Texture property to override it."
    },
    "originalTextures": {
        "tooltip": "A JSON string containing the original texture used on the model."
    },
    "imageURL": {
        "tooltip": "The URL for the image source."
    },
    "imageColor": {
        "tooltip": "The tint to be applied to the image.",
        "jsPropertyName": "color"
    },
    "imageAlpha": {
        "tooltip": "The opacity of the image between 0.0 fully transparent and 1.0 completely opaque."
    },
    "emissive": {
        "tooltip": "If enabled, the image will display at full brightness."
    },
    "subImage": {
        "tooltip": "The area of the image that is displayed."
    },
    "keepAspectRatio": {
        "tooltip": "If enabled, the image will maintain its original aspect ratio."
    },
    "sourceUrl": {
        "tooltip": "The URL for the web page source."
    },
    "dpi": {
        "tooltip": "The resolution to display the page at, in pixels per inch. Use this to resize your web source in the frame."
    },
    "inputMode": {
        "tooltip": "The user input mode to use."
    },
    "showKeyboardFocusHighlight": {
        "tooltip": "If enabled, highlights when it has keyboard focus."
    },
    "isEmitting": {
        "tooltip": "If enabled, then particles are emitted."
    },
    "lifespan": {
        "tooltip": "How long each particle lives, measured in seconds."
    },
    "maxParticles": {
        "tooltip": "The maximum number of particles to render at one time. Older particles are swapped out for new ones."
    },
    "particleTextures": {
        "tooltip": "The URL of a JPG or PNG image file to display for each particle.",
        "jsPropertyName": "textures"
    },
    "emitRate": {
        "tooltip": "The number of particles per second to emit."
    },
    "emitSpeed": {
        "tooltip": "The speed that each particle is emitted at, measured in m/s."
    },
    "speedSpread": {
        "tooltip": "The spread in speeds at which particles are emitted at, resulting in a variety of speeds."
    },
    "particleShapeType": {
        "tooltip": "The shape of the surface from which to emit particles.",
        "jsPropertyName": "shapeType"
    },
    "particleCompoundShapeURL": {
        "tooltip": "The model file to use for the particle emitter if Shape Type is \"Use Compound Shape URL\".",
        "jsPropertyName": "compoundShapeURL"
    },
    "emitDimensions": {
        "tooltip": "The outer limit radius in dimensions that the particles can be emitted from."
    },
    "emitOrientation": {
        "tooltip": "The orientation of particle emission relative to the entity's axes."
    },
    "emitRadiusStart": {
        "tooltip": "The inner limit radius in dimensions that the particles start emitting from."
    },
    "emitterShouldTrail": {
        "tooltip": "If enabled, then particles are \"left behind\" as the emitter moves, otherwise they are not."
    },
    "particleRadiusTriple": {
        "tooltip": "The size of each particle.",
        "jsPropertyName": "particleRadius"
    },
    "particleRadius": {
        "tooltip": "The size of each particle."
    },
    "radiusStart": {
        "tooltip": "The start size of each particle."
    },
    "radiusFinish": {
        "tooltip": "The finish size of each particle."
    },
    "radiusSpread": {
        "tooltip": "The spread in size that each particle is given, resulting in a variety of sizes."
    },
    "particleColorTriple": {
        "tooltip": "The color of each particle.",
        "jsPropertyName": "color"
    },
    "particleColor": {
        "tooltip": "The color of each particle.",
        "jsPropertyName": "color"
    },
    "colorStart": {
        "tooltip": "The start color of each particle."
    },
    "colorFinish": {
        "tooltip": "The finish color of each particle."
    },
    "colorSpread": {
        "tooltip": "The spread in color that each particle is given, resulting in a variety of colors. The variation range (-/+) on each RGB channel to use around the RGB values of the particle color."
    },
    "particleAlphaTriple": {
        "tooltip": "The opacity of each particle between 0.0 fully transparent and 1.0 completely opaque.",
        "jsPropertyName": "alpha"
    },
    "alpha": {
        "tooltip": "The opacity of each particle between 0.0 fully transparent and 1.0 completely opaque."
    },
    "alphaStart": {
        "tooltip": "The initial opacity level of each particle between 0.0 fully transparent and 1.0 completely opaque."
    },
    "alphaFinish": {
        "tooltip": "The final opacity level of each particle between 0.0 fully transparent and 1.0 completely opaque."
    },
    "alphaSpread": {
        "tooltip": "The spread in opacity that each particle is given, resulting in a variety of opacity levels."
    },
    "emitAcceleration": {
        "tooltip": "The acceleration that is applied to each particle during its lifetime."
    },
    "accelerationSpread": {
        "tooltip": "The spread in accelerations that each particle is given, resulting in a variety of accelerations."
    },
    "particleSpinTriple": {
        "tooltip": "The spin of each particle.",
        "jsPropertyName": "particleSpin"
    },
    "particleSpin": {
        "tooltip": "The spin of each particle."
    },
    "spinStart": {
        "tooltip": "The start spin of each particle."
    },
    "spinFinish": {
        "tooltip": "The finish spin of each particle."
    },
    "spinSpread": {
        "tooltip": "The spread in spin that each particle is given, resulting in a variety of spins."
    },
    "rotateWithEntity": {
        "tooltip": "If enabled, each particle will spin relative to the rotation of the entity as a whole."
    },
    "particlePolarTriple": {
        "tooltip": "The angle range in deg at which particles are emitted. Starts in the entity's -z direction, and rotates around its y axis.",
        "skipJSProperty": true
    },
    "polarStart": {
        "tooltip": "The start angle in deg at which particles are emitted. Starts in the entity's -z direction, and rotates around its y axis."
    },
    "polarFinish": {
        "tooltip": "The finish angle in deg at which particles are emitted. Starts in the entity's -z direction, and rotates around its y axis."
    },
    "particleAzimuthTriple": {
        "tooltip": "The angle range in deg at which particles are emitted.  Starts in the entity's -x direction, and rotates around its z axis.",
        "skipJSProperty": true
    },
    "azimuthStart": {
        "tooltip": "The start angle in deg at which particles are emitted.  Starts in the entity's -x direction, and rotates around its z axis."
    },
    "azimuthFinish": {
        "tooltip": "The finish angle in deg at which particles are emitted.  Starts in the entity's -x direction, and rotates around its z axis."
    },
    "lightColor": {
        "tooltip": "The color of the light emitted.",
        "jsPropertyName": "color"
    },
    "intensity": {
        "tooltip": "The brightness of the light."
    },
    "falloffRadius": {
        "tooltip": "The distance from the light's center where the intensity is reduced."
    },
    "isSpotlight": {
        "tooltip": "If enabled, then the light is directional, otherwise the light is a point light which emits light in all directions."
    },
    "exponent": {
        "tooltip": "Affects the softness of the spotlight beam; the higher the value, the softer the beam."
    },
    "cutoff": {
        "tooltip": "Affects the size of the spotlight beam; the higher the value, the larger the beam."
    },
    "materialURL": {
        "tooltip": "The URL to an external JSON file or \"materialData\". Append \"?<material name>\" to select a single material if multiple are defined."
    },
    "materialData": {
        "tooltip": "Can be used instead of a JSON file when material set to materialData."
    },
    "parentMaterialName": {
        "tooltip": "The target mesh indices or material names that this material entity should be assigned to on it's parent. This only supports parents that are Avatars as well as Shape or Model entity types."
    },
    "priority": {
        "tooltip": "The priority of the material, where a larger number means higher priority. Original materials = 0."
    },
    "materialMappingMode": {
        "tooltip": "How the material is mapped to the entity. If set to \"UV space\", then the material will be applied with the target entity's UV coordinates. If set to \"3D Projected\", then the 3D transform of the material entity will be used."
    },
    "materialMappingPos": {
        "tooltip": "The offset position of the bottom left of the material within the parent's UV space."
    },
    "materialMappingScale": {
        "tooltip": "How many times the material will repeat in each direction within the parent's UV space."
    },
    "materialMappingRot": {
        "tooltip": "How much to rotate the material within the parent's UV-space, in degrees."
    },
    "materialRepeat": {
        "tooltip": "If enabled, the material will repeat, otherwise it will clamp."
    },
    "followCamera": {
        "tooltip": "If enabled, the grid is always visible even as the camera moves to another position."
    },
    "majorGridEvery": {
        "tooltip": "The number of \"Minor Grid Every\" intervals at which to draw a thick grid line."
    },
    "minorGridEvery": {
        "tooltip": "The real number of meters at which to draw thin grid lines."
    },
    "id": {
        "tooltip": "The unique identifier of this entity."
    },
    "name": {
        "tooltip": "The name of this entity."
    },
    "description": {
        "tooltip": "Use this field to describe the entity."
    },
    "position": {
        "tooltip": "The global position of this entity."
    },
    "localPosition": {
        "tooltip": "The local position of this entity."
    },
    "rotation": {
        "tooltip": "The global rotation of this entity."
    },
    "localRotation": {
        "tooltip": "The local rotation of this entity."
    },
    "dimensions": {
        "tooltip": "The global dimensions of this entity."
    },
    "localDimensions": {
        "tooltip": "The local dimensions of this entity."
    },
    "scale": {
        "tooltip": "The global scaling of this entity.",
        "skipJSProperty": true
    },
    "registrationPoint": {
        "tooltip": "The point in the entity at which the entity is rotated about."
    },
    "visible": {
        "tooltip": "If enabled, this entity will be visible."
    },
    "locked": {
        "tooltip": "If enabled, this entity will be locked."
    },
    "collisionless": {
        "tooltip": "If enabled, this entity will collide with other entities or avatars."
    },
    "dynamic": {
        "tooltip": "If enabled, this entity has collisions associated with it that can affect its movement."
    },
    "collidesWithStatic": {
        "tooltip": "If enabled, this entity will collide with other non-moving, static entities.",
        "jsPropertyName": "collidesWith"
    },
    "collidesWithDynamic": {
        "tooltip": "If enabled, this entity will collide with other dynamic entities.",
        "jsPropertyName": "collidesWith"
    },
    "collidesWithKinematic": {
        "tooltip": "If enabled, this entity will collide with other kinematic entities (they have velocity but are not dynamic).",
        "jsPropertyName": "collidesWith"
    },
    "collidesWithOtherAvatar": {
        "tooltip": "If enabled, this entity will collide with other user's avatars.",
        "jsPropertyName": "collidesWith"
    },
    "collidesWithMyAvatar": {
        "tooltip": "If enabled, this entity will collide with your own avatar.",
        "jsPropertyName": "collidesWith"
    },
    "collisionSoundURL": {
        "tooltip": "The URL of a sound to play when the entity collides with something else."
    },
    "grab.grabbable": {
        "tooltip": "If enabled, this entity will allow grabbing input and will be movable."
    },
    "grab.triggerable": {
        "tooltip": "If enabled, the collider on this entity is used for triggering events."
    },
    "mirrorMode": {
        "tooltip": "If this entity should render normally, or as a  \"Mirror\" or  \"Portal\""
    },
    "portalExitID": {
        "tooltip": "If this entity is a portal, what entity it should use as its exit."
    },
    "cloneable": {
        "tooltip": "If enabled, this entity can be duplicated."
    },
    "cloneLifetime": {
        "tooltip": "The lifetime for clones of this entity."
    },
    "cloneLimit": {
        "tooltip": "The total number of clones of this entity that can exist in the domain at any given time."
    },
    "cloneDynamic": {
        "tooltip": "If enabled, then clones created from this entity will be dynamic, allowing the clone to collide."
    },
    "cloneAvatarEntity": {
        "tooltip": "If enabled, then clones created from this entity will be created as avatar entities."
    },
    "grab.grabFollowsController": {
        "tooltip": "If enabled, grabbed entities will follow the movements of your hand controller instead of your avatar's hand."
    },
    "canCastShadow": {
        "tooltip": "If enabled, the geometry of this entity casts shadows when a shadow-casting light source shines on it. Note: Shadows are rendered only on high-profiled computers. This setting will have no effect on computers profiled to medium or low graphics."
    },
    "ignorePickIntersection": {
        "tooltip": "If enabled, this entity will not be considered for ray picks, and will also not occlude other entities when picking."
    },
    "parentID": {
        "tooltip": "The ID of the entity or avatar that this entity is parented to."
    },
    "parentJointIndex": {
        "tooltip": "If the entity is parented to an avatar, this joint defines where on the avatar the entity is parented."
    },
    "href": {
        "tooltip": "The URL that will be opened when a user clicks on this entity. Useful for web pages and portals."
    },
    "script": {
        "tooltip": "The URL to an external JS file to add behaviors to the client."
    },
    "serverScripts": {
        "tooltip": "The URL to an external JS file to add behaviors to the server."
    },
    "serverScriptsStatus": {
        "tooltip": "The status of the server script, if provided. This shows if it's running or has an error.",
        "skipJSProperty": true
    },
    "hasLifetime": {
        "tooltip": "If enabled, the entity will disappear after a certain amount of time specified by Lifetime.",
        "jsPropertyName": "lifetime"
    },
    "lifetime": {
        "tooltip": "The time this entity will exist in the environment for."
    },
    "userData": {
        "tooltip": "Used to store extra data about the entity in JSON format."
    },
    "localVelocity": {
        "tooltip": "The linear velocity vector of the entity. The velocity at which this entity moves forward in space."
    },
    "damping": {
        "tooltip": "The linear damping to slow down the linear velocity of an entity over time. A higher damping value slows down the entity more quickly. The default value is for an exponential decay timescale of 2.0s, where it takes 2.0s for the movement to slow to 1/e = 0.368 of its initial value."
    },
    "localAngularVelocity": {
        "tooltip": "The angular velocity of the entity in 'deg/s' with respect to its axes, about its pivot point."
    },
    "angularDamping": {
        "tooltip": "The angular damping to slow down the angular velocity of an entity over time. A higher damping value slows down the entity more quickly. The default value is for an exponential decay timescale of 2.0s, where it takes 2.0s for the movement to slow to 1/e = 0.368 of its initial value."
    },
    "restitution": {
        "tooltip": "If enabled, the entity can bounce against other objects that also have Bounciness."
    },
    "friction": {
        "tooltip": "The friction applied to slow down an entity when it's moving against another entity."
    },
    "density": {
        "tooltip": "The density of the entity. The higher the density, the harder the entity is to move."
    },
    "gravity": {
        "tooltip": "The acceleration due to gravity that the entity should move with, in world space."
    },
    "renderLayer": {
        "tooltip": "The layer on which this entity is rendered."
    },
    "primitiveMode": {
        "tooltip": "The mode in which to draw an entity, either \"Solid\" or \"Wireframe\"."
    },
    "billboardMode": {
        "tooltip": "Determines if and how the entity will face the camera."
    },
    "renderWithZones": {
        "tooltip": "If set, this entity will only render when your avatar is inside of a zone in this list."
    },
    "groupCulled": {
        "tooltip": "If false, individual pieces of the entity may be culled by the render engine. If true, either the entire entity will be culled, or it won't at all."
    },
    "useOriginalPivot": {
        "tooltip": "If false, the model will be centered based on its content, ignoring any offset in the model itself. If true, the model will respect its original offset."
    },
    "webColor": {
        "tooltip": "The tint of the web entity."
    },
    "webAlpha": {
        "tooltip": "The opacity of the web entity between 0.0 fully transparent and 1.0 completely opaque."
    },
    "useBackground": {
        "tooltip": "If disabled, this web entity will support a transparent background for the webpage and its elements if the CSS property of 'background-color' on the 'body' is set with transparency."
    },
    "maxFPS": {
        "tooltip": "The FPS at which to render the web entity. Higher values will have a performance impact."
    },
    "scriptURL": {
        "tooltip": "The URL of a script to inject into the web page."
    },
    "userAgent": {
        "tooltip": "The user agent that the web entity will use when visiting web pages."
    },
    "alignToGrid": {
        "tooltip": "Used to align entities to the grid, or floor of the environment.",
        "skipJSProperty": true
    },
    "createModel": {
        "tooltip": "An entity that is based on a custom mesh created from an .OBJ or .FBX.",
        "skipJSProperty": true
    },
    "createShape": {
        "tooltip": "An entity that has many different primitive shapes.",
        "skipJSProperty": true
    },
    "createLight": {
        "tooltip": "An entity that emits light.",
        "skipJSProperty": true
    },
    "createText": {
        "tooltip": "An entity that displays text on a panel.",
        "skipJSProperty": true
    },
    "createImage": {
        "tooltip": "An entity that displays an image on a panel.",
        "skipJSProperty": true
    },
    "createWeb": {
        "tooltip": "An entity that displays a web page on a panel.",
        "skipJSProperty": true
    },
    "createZone": {
        "tooltip": "An entity that can be used for skyboxes, lighting, and can constrain or change avatar behaviors.",
        "skipJSProperty": true
    },
    "createParticle": {
        "tooltip": "An entity that emits particles.",
        "skipJSProperty": true
    },
    "createMaterial": {
        "tooltip": "An entity that creates a material that can be attached to a Shape or Model.",
        "skipJSProperty": true
    },
    "useAssetServer": {
        "tooltip": "A server that hosts content and assets. You can't take items that are hosted here into other domains.",
        "skipJSProperty": true
    },
    "importNewEntity": {
        "tooltip": "Import a local or hosted file that can be used across domains.",
        "skipJSProperty": true
    }
}
